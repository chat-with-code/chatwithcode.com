(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4591],{98163:function(e,o,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/subscriptions-and-live-queries-real-time-with-graphql",function(){return t(24547)}])},24547:function(e,o,t){"use strict";t.r(o),t.d(o,{CH:function(){return i},chCodeConfig:function(){return F},default:function(){return a.Z}});var n=t(35250),r=t(59398),s=t(46557),l=t(92027);t(78526);var c=t(33865);t(74350);var p=t(76024),a=t(96769);e=t.hmd(e);let i={annotations:p.ds,Code:p.EK},F={staticMediaQuery:"not screen, (max-width: 768px)",theme:{$schema:"vscode://schemas/color-theme",name:"dracula",author:"Zeno Rocha",maintainers:["Derek P Sifford <dereksifford@gmail.com>"],semanticClass:"theme.dracula",semanticHighlighting:!0,dracula:{base:["#282A36","#F8F8F2","#44475A","#6272A4","#8BE9FD","#50FA7B","#FFB86C","#FF79C6","#BD93F9","#FF5555","#F1FA8C"],ansi:["#21222C","#FF5555","#50FA7B","#F1FA8C","#BD93F9","#FF79C6","#8BE9FD","#F8F8F2","#6272A4","#FF6E6E","#69FF94","#FFFFA5","#D6ACFF","#FF92DF","#A4FFFF","#FFFFFF"],brightOther:["#E9F284","#8BE9FE"],other:["#44475A75","#FFFFFF1A","#FFFFFF","#44475A70","#424450","#343746","#21222C","#191A21"]},colors:{"terminal.background":"#282A36","terminal.foreground":"#F8F8F2","terminal.ansiBrightBlack":"#6272A4","terminal.ansiBrightRed":"#FF6E6E","terminal.ansiBrightGreen":"#69FF94","terminal.ansiBrightYellow":"#FFFFA5","terminal.ansiBrightBlue":"#D6ACFF","terminal.ansiBrightMagenta":"#FF92DF","terminal.ansiBrightCyan":"#A4FFFF","terminal.ansiBrightWhite":"#FFFFFF","terminal.ansiBlack":"#21222C","terminal.ansiRed":"#FF5555","terminal.ansiGreen":"#50FA7B","terminal.ansiYellow":"#F1FA8C","terminal.ansiBlue":"#BD93F9","terminal.ansiMagenta":"#FF79C6","terminal.ansiCyan":"#8BE9FD","terminal.ansiWhite":"#F8F8F2",focusBorder:"#6272A4",foreground:"#F8F8F2","selection.background":"#BD93F9",errorForeground:"#FF5555","button.background":"#44475A","button.foreground":"#F8F8F2","button.secondaryBackground":"#282A36","button.secondaryForeground":"#F8F8F2","button.secondaryHoverBackground":"#343746","dropdown.background":"#343746","dropdown.border":"#191A21","dropdown.foreground":"#F8F8F2","input.background":"#282A36","input.foreground":"#F8F8F2","input.border":"#191A21","input.placeholderForeground":"#6272A4","inputOption.activeBorder":"#BD93F9","inputValidation.infoBorder":"#FF79C6","inputValidation.warningBorder":"#FFB86C","inputValidation.errorBorder":"#FF5555","badge.foreground":"#F8F8F2","badge.background":"#44475A","progressBar.background":"#FF79C6","list.activeSelectionBackground":"#44475A","list.activeSelectionForeground":"#F8F8F2","list.dropBackground":"#44475A","list.focusBackground":"#44475A75","list.highlightForeground":"#8BE9FD","list.hoverBackground":"#44475A75","list.inactiveSelectionBackground":"#44475A75","list.warningForeground":"#FFB86C","list.errorForeground":"#FF5555","activityBar.background":"#343746","activityBar.inactiveForeground":"#6272A4","activityBar.foreground":"#F8F8F2","activityBar.activeBorder":"#FF79C680","activityBar.activeBackground":"#BD93F910","activityBarBadge.background":"#FF79C6","activityBarBadge.foreground":"#F8F8F2","sideBar.background":"#21222C","sideBarTitle.foreground":"#F8F8F2","sideBarSectionHeader.background":"#282A36","sideBarSectionHeader.border":"#191A21","editorGroup.border":"#BD93F9","editorGroup.dropBackground":"#44475A70","editorGroupHeader.tabsBackground":"#191A21","tab.activeBackground":"#282A36","tab.activeForeground":"#F8F8F2","tab.border":"#191A21","tab.activeBorderTop":"#FF79C680","tab.inactiveBackground":"#21222C","tab.inactiveForeground":"#6272A4","editor.foreground":"#F8F8F2","editor.background":"#282A36","editorLineNumber.foreground":"#6272A4","editor.selectionBackground":"#44475A","editor.selectionHighlightBackground":"#424450","editor.foldBackground":"#21222C","editor.wordHighlightBackground":"#8BE9FD50","editor.wordHighlightStrongBackground":"#50FA7B50","editor.findMatchBackground":"#FFB86C80","editor.findMatchHighlightBackground":"#FFFFFF40","editor.findRangeHighlightBackground":"#44475A75","editor.hoverHighlightBackground":"#8BE9FD50","editor.lineHighlightBorder":"#44475A","editorLink.activeForeground":"#8BE9FD","editor.rangeHighlightBackground":"#BD93F915","editor.snippetTabstopHighlightBackground":"#282A36","editor.snippetTabstopHighlightBorder":"#6272A4","editor.snippetFinalTabstopHighlightBackground":"#282A36","editor.snippetFinalTabstopHighlightBorder":"#50FA7B","editorWhitespace.foreground":"#FFFFFF1A","editorIndentGuide.background":"#FFFFFF1A","editorIndentGuide.activeBackground":"#FFFFFF45","editorRuler.foreground":"#FFFFFF1A","editorCodeLens.foreground":"#6272A4","editorBracketHighlight.foreground1":"#F8F8F2","editorBracketHighlight.foreground2":"#FF79C6","editorBracketHighlight.foreground3":"#8BE9FD","editorBracketHighlight.foreground4":"#50FA7B","editorBracketHighlight.foreground5":"#BD93F9","editorBracketHighlight.foreground6":"#FFB86C","editorBracketHighlight.unexpectedBracket.foreground":"#FF5555","editorOverviewRuler.border":"#191A21","editorOverviewRuler.selectionHighlightForeground":"#FFB86C","editorOverviewRuler.wordHighlightForeground":"#8BE9FD","editorOverviewRuler.wordHighlightStrongForeground":"#50FA7B","editorOverviewRuler.modifiedForeground":"#8BE9FD80","editorOverviewRuler.addedForeground":"#50FA7B80","editorOverviewRuler.deletedForeground":"#FF555580","editorOverviewRuler.errorForeground":"#FF555580","editorOverviewRuler.warningForeground":"#FFB86C80","editorOverviewRuler.infoForeground":"#8BE9FD80","editorError.foreground":"#FF5555","editorWarning.foreground":"#8BE9FD","editorGutter.modifiedBackground":"#8BE9FD80","editorGutter.addedBackground":"#50FA7B80","editorGutter.deletedBackground":"#FF555580","gitDecoration.modifiedResourceForeground":"#8BE9FD","gitDecoration.deletedResourceForeground":"#FF5555","gitDecoration.untrackedResourceForeground":"#50FA7B","gitDecoration.ignoredResourceForeground":"#6272A4","gitDecoration.conflictingResourceForeground":"#FFB86C","diffEditor.insertedTextBackground":"#50FA7B20","diffEditor.removedTextBackground":"#FF555550","editorWidget.background":"#21222C","editorSuggestWidget.background":"#21222C","editorSuggestWidget.foreground":"#F8F8F2","editorSuggestWidget.selectedBackground":"#44475A","editorHoverWidget.background":"#282A36","editorHoverWidget.border":"#6272A4","editorMarkerNavigation.background":"#21222C","peekView.border":"#44475A","peekViewEditor.background":"#282A36","peekViewEditor.matchHighlightBackground":"#F1FA8C80","peekViewResult.background":"#21222C","peekViewResult.fileForeground":"#F8F8F2","peekViewResult.lineForeground":"#F8F8F2","peekViewResult.matchHighlightBackground":"#F1FA8C80","peekViewResult.selectionBackground":"#44475A","peekViewResult.selectionForeground":"#F8F8F2","peekViewTitle.background":"#191A21","peekViewTitleDescription.foreground":"#6272A4","peekViewTitleLabel.foreground":"#F8F8F2","merge.currentHeaderBackground":"#50FA7B90","merge.incomingHeaderBackground":"#BD93F990","editorOverviewRuler.currentContentForeground":"#50FA7B","editorOverviewRuler.incomingContentForeground":"#BD93F9","panel.background":"#282A36","panel.border":"#BD93F9","panelTitle.activeBorder":"#FF79C6","panelTitle.activeForeground":"#F8F8F2","panelTitle.inactiveForeground":"#6272A4","statusBar.background":"#191A21","statusBar.foreground":"#F8F8F2","statusBar.debuggingBackground":"#FF5555","statusBar.debuggingForeground":"#191A21","statusBar.noFolderBackground":"#191A21","statusBar.noFolderForeground":"#F8F8F2","statusBarItem.prominentBackground":"#FF5555","statusBarItem.prominentHoverBackground":"#FFB86C","statusBarItem.remoteForeground":"#282A36","statusBarItem.remoteBackground":"#BD93F9","titleBar.activeBackground":"#21222C","titleBar.activeForeground":"#F8F8F2","titleBar.inactiveBackground":"#191A21","titleBar.inactiveForeground":"#6272A4","extensionButton.prominentForeground":"#F8F8F2","extensionButton.prominentBackground":"#50FA7B90","extensionButton.prominentHoverBackground":"#50FA7B60","pickerGroup.border":"#BD93F9","pickerGroup.foreground":"#8BE9FD","debugToolBar.background":"#21222C","walkThrough.embeddedEditorBackground":"#21222C","settings.headerForeground":"#F8F8F2","settings.modifiedItemIndicator":"#FFB86C","settings.dropdownBackground":"#21222C","settings.dropdownForeground":"#F8F8F2","settings.dropdownBorder":"#191A21","settings.checkboxBackground":"#21222C","settings.checkboxForeground":"#F8F8F2","settings.checkboxBorder":"#191A21","settings.textInputBackground":"#21222C","settings.textInputForeground":"#F8F8F2","settings.textInputBorder":"#191A21","settings.numberInputBackground":"#21222C","settings.numberInputForeground":"#F8F8F2","settings.numberInputBorder":"#191A21","breadcrumb.foreground":"#6272A4","breadcrumb.background":"#282A36","breadcrumb.focusForeground":"#F8F8F2","breadcrumb.activeSelectionForeground":"#F8F8F2","breadcrumbPicker.background":"#191A21","listFilterWidget.background":"#343746","listFilterWidget.outline":"#424450","listFilterWidget.noMatchesOutline":"#FF5555"},tokenColors:[{settings:{foreground:"#F8F8F2",background:"#282A36"}},{scope:["emphasis"],settings:{fontStyle:"italic"}},{scope:["strong"],settings:{fontStyle:"bold"}},{scope:["header"],settings:{foreground:"#BD93F9"}},{scope:["meta.diff","meta.diff.header"],settings:{foreground:"#6272A4"}},{scope:["markup.inserted"],settings:{foreground:"#50FA7B"}},{scope:["markup.deleted"],settings:{foreground:"#FF5555"}},{scope:["markup.changed"],settings:{foreground:"#FFB86C"}},{scope:["invalid"],settings:{foreground:"#FF5555",fontStyle:"underline italic"}},{scope:["invalid.deprecated"],settings:{foreground:"#F8F8F2",fontStyle:"underline italic"}},{scope:["entity.name.filename"],settings:{foreground:"#F1FA8C"}},{scope:["markup.error"],settings:{foreground:"#FF5555"}},{name:"Underlined markup",scope:["markup.underline"],settings:{fontStyle:"underline"}},{name:"Bold markup",scope:["markup.bold"],settings:{fontStyle:"bold",foreground:"#FFB86C"}},{name:"Markup headings",scope:["markup.heading"],settings:{fontStyle:"bold",foreground:"#BD93F9"}},{name:"Markup italic",scope:["markup.italic"],settings:{foreground:"#F1FA8C",fontStyle:"italic"}},{name:"Bullets, lists (prose)",scope:["beginning.punctuation.definition.list.markdown","beginning.punctuation.definition.quote.markdown","punctuation.definition.link.restructuredtext"],settings:{foreground:"#8BE9FD"}},{name:"Inline code (prose)",scope:["markup.inline.raw","markup.raw.restructuredtext"],settings:{foreground:"#50FA7B"}},{name:"Links (prose)",scope:["markup.underline.link","markup.underline.link.image"],settings:{foreground:"#8BE9FD"}},{name:"Link text, image alt text (prose)",scope:["meta.link.reference.def.restructuredtext","punctuation.definition.directive.restructuredtext","string.other.link.description","string.other.link.title"],settings:{foreground:"#FF79C6"}},{name:"Blockquotes (prose)",scope:["entity.name.directive.restructuredtext","markup.quote"],settings:{foreground:"#F1FA8C",fontStyle:"italic"}},{name:"Horizontal rule (prose)",scope:["meta.separator.markdown"],settings:{foreground:"#6272A4"}},{name:"Code blocks",scope:["fenced_code.block.language","markup.raw.inner.restructuredtext","markup.fenced_code.block.markdown punctuation.definition.markdown"],settings:{foreground:"#50FA7B"}},{name:"Prose constants",scope:["punctuation.definition.constant.restructuredtext"],settings:{foreground:"#BD93F9"}},{name:"Braces in markdown headings",scope:["markup.heading.markdown punctuation.definition.string.begin","markup.heading.markdown punctuation.definition.string.end"],settings:{foreground:"#BD93F9"}},{name:"Braces in markdown paragraphs",scope:["meta.paragraph.markdown punctuation.definition.string.begin","meta.paragraph.markdown punctuation.definition.string.end"],settings:{foreground:"#F8F8F2"}},{name:"Braces in markdown blockquotes",scope:["markup.quote.markdown meta.paragraph.markdown punctuation.definition.string.begin","markup.quote.markdown meta.paragraph.markdown punctuation.definition.string.end"],settings:{foreground:"#F1FA8C"}},{name:"User-defined class names",scope:["entity.name.type.class","entity.name.class"],settings:{foreground:"#8BE9FD",fontStyle:"normal"}},{name:"this, super, self, etc.",scope:["keyword.expressions-and-types.swift","keyword.other.this","variable.language","variable.language punctuation.definition.variable.php","variable.other.readwrite.instance.ruby","variable.parameter.function.language.special"],settings:{foreground:"#BD93F9",fontStyle:"italic"}},{name:"Inherited classes",scope:["entity.other.inherited-class"],settings:{fontStyle:"italic",foreground:"#8BE9FD"}},{name:"Comments",scope:["comment","punctuation.definition.comment","unused.comment","wildcard.comment"],settings:{foreground:"#6272A4"}},{name:"JSDoc-style keywords",scope:["comment keyword.codetag.notation","comment.block.documentation keyword","comment.block.documentation storage.type.class"],settings:{foreground:"#FF79C6"}},{name:"JSDoc-style types",scope:["comment.block.documentation entity.name.type"],settings:{foreground:"#8BE9FD",fontStyle:"italic"}},{name:"JSDoc-style type brackets",scope:["comment.block.documentation entity.name.type punctuation.definition.bracket"],settings:{foreground:"#8BE9FD"}},{name:"JSDoc-style comment parameters",scope:["comment.block.documentation variable"],settings:{foreground:"#FFB86C",fontStyle:"italic"}},{name:"Constants",scope:["constant","variable.other.constant"],settings:{foreground:"#BD93F9"}},{name:"Constant escape sequences",scope:["constant.character.escape","constant.character.string.escape","constant.regexp"],settings:{foreground:"#FF79C6"}},{name:"HTML tags",scope:["entity.name.tag"],settings:{foreground:"#FF79C6"}},{name:"CSS attribute parent selectors ('&')",scope:["entity.other.attribute-name.parent-selector"],settings:{foreground:"#FF79C6"}},{name:"HTML/CSS attribute names",scope:["entity.other.attribute-name"],settings:{foreground:"#50FA7B",fontStyle:"italic"}},{name:"Function names",scope:["entity.name.function","meta.function-call.object","meta.function-call.php","meta.function-call.static","meta.method-call.java meta.method","meta.method.groovy","support.function.any-method.lua","keyword.operator.function.infix"],settings:{foreground:"#50FA7B"}},{name:"Function parameters",scope:["entity.name.variable.parameter","meta.at-rule.function variable","meta.at-rule.mixin variable","meta.function.arguments variable.other.php","meta.selectionset.graphql meta.arguments.graphql variable.arguments.graphql","variable.parameter"],settings:{fontStyle:"italic",foreground:"#FFB86C"}},{name:"Decorators",scope:["meta.decorator variable.other.readwrite","meta.decorator variable.other.property"],settings:{foreground:"#50FA7B",fontStyle:"italic"}},{name:"Decorator Objects",scope:["meta.decorator variable.other.object"],settings:{foreground:"#50FA7B"}},{name:"Keywords",scope:["keyword","punctuation.definition.keyword"],settings:{foreground:"#FF79C6"}},{name:'Keyword "new"',scope:["keyword.control.new","keyword.operator.new"],settings:{fontStyle:"bold"}},{name:"Generic selectors (CSS/SCSS/Less/Stylus)",scope:["meta.selector"],settings:{foreground:"#FF79C6"}},{name:"Language Built-ins",scope:["support"],settings:{fontStyle:"italic",foreground:"#8BE9FD"}},{name:"Built-in magic functions and constants",scope:["support.function.magic","support.variable","variable.other.predefined"],settings:{fontStyle:"regular",foreground:"#BD93F9"}},{name:"Built-in functions / properties",scope:["support.function","support.type.property-name"],settings:{fontStyle:"regular"}},{name:"Separators (key/value, namespace, inheritance, pointer, hash, slice, etc)",scope:["constant.other.symbol.hashkey punctuation.definition.constant.ruby","entity.other.attribute-name.placeholder punctuation","entity.other.attribute-name.pseudo-class punctuation","entity.other.attribute-name.pseudo-element punctuation","meta.group.double.toml","meta.group.toml","meta.object-binding-pattern-variable punctuation.destructuring","punctuation.colon.graphql","punctuation.definition.block.scalar.folded.yaml","punctuation.definition.block.scalar.literal.yaml","punctuation.definition.block.sequence.item.yaml","punctuation.definition.entity.other.inherited-class","punctuation.function.swift","punctuation.separator.dictionary.key-value","punctuation.separator.hash","punctuation.separator.inheritance","punctuation.separator.key-value","punctuation.separator.key-value.mapping.yaml","punctuation.separator.namespace","punctuation.separator.pointer-access","punctuation.separator.slice","string.unquoted.heredoc punctuation.definition.string","support.other.chomping-indicator.yaml","punctuation.separator.annotation"],settings:{foreground:"#FF79C6"}},{name:"Brackets, braces, parens, etc.",scope:["keyword.operator.other.powershell","keyword.other.statement-separator.powershell","meta.brace.round","meta.function-call punctuation","punctuation.definition.arguments.begin","punctuation.definition.arguments.end","punctuation.definition.entity.begin","punctuation.definition.entity.end","punctuation.definition.tag.cs","punctuation.definition.type.begin","punctuation.definition.type.end","punctuation.section.scope.begin","punctuation.section.scope.end","storage.type.generic.java","string.template meta.brace","string.template punctuation.accessor"],settings:{foreground:"#F8F8F2"}},{name:"Variable interpolation operators",scope:["meta.string-contents.quoted.double punctuation.definition.variable","punctuation.definition.interpolation.begin","punctuation.definition.interpolation.end","punctuation.definition.template-expression.begin","punctuation.definition.template-expression.end","punctuation.section.embedded.begin","punctuation.section.embedded.coffee","punctuation.section.embedded.end","punctuation.section.embedded.end source.php","punctuation.section.embedded.end source.ruby","punctuation.definition.variable.makefile"],settings:{foreground:"#FF79C6"}},{name:"Keys (serializable languages)",scope:["entity.name.function.target.makefile","entity.name.section.toml","entity.name.tag.yaml","variable.other.key.toml"],settings:{foreground:"#8BE9FD"}},{name:"Dates / timestamps (serializable languages)",scope:["constant.other.date","constant.other.timestamp"],settings:{foreground:"#FFB86C"}},{name:"YAML aliases",scope:["variable.other.alias.yaml"],settings:{fontStyle:"italic underline",foreground:"#50FA7B"}},{name:"Storage",scope:["storage","meta.implementation storage.type.objc","meta.interface-or-protocol storage.type.objc","source.groovy storage.type.def"],settings:{fontStyle:"regular",foreground:"#FF79C6"}},{name:"Types",scope:["entity.name.type","keyword.primitive-datatypes.swift","keyword.type.cs","meta.protocol-list.objc","meta.return-type.objc","source.go storage.type","source.groovy storage.type","source.java storage.type","source.powershell entity.other.attribute-name","storage.class.std.rust","storage.type.attribute.swift","storage.type.c","storage.type.core.rust","storage.type.cs","storage.type.groovy","storage.type.objc","storage.type.php","storage.type.haskell","storage.type.ocaml"],settings:{fontStyle:"italic",foreground:"#8BE9FD"}},{name:"Generics, templates, and mapped type declarations",scope:["entity.name.type.type-parameter","meta.indexer.mappedtype.declaration entity.name.type","meta.type.parameters entity.name.type"],settings:{foreground:"#FFB86C"}},{name:"Modifiers",scope:["storage.modifier"],settings:{foreground:"#FF79C6"}},{name:"RegExp string",scope:["string.regexp","constant.other.character-class.set.regexp","constant.character.escape.backslash.regexp"],settings:{foreground:"#F1FA8C"}},{name:"Non-capture operators",scope:["punctuation.definition.group.capture.regexp"],settings:{foreground:"#FF79C6"}},{name:"RegExp start and end characters",scope:["string.regexp punctuation.definition.string.begin","string.regexp punctuation.definition.string.end"],settings:{foreground:"#FF5555"}},{name:"Character group",scope:["punctuation.definition.character-class.regexp"],settings:{foreground:"#8BE9FD"}},{name:"Capture groups",scope:["punctuation.definition.group.regexp"],settings:{foreground:"#FFB86C"}},{name:"Assertion operators",scope:["punctuation.definition.group.assertion.regexp","keyword.operator.negation.regexp"],settings:{foreground:"#FF5555"}},{name:"Positive lookaheads",scope:["meta.assertion.look-ahead.regexp"],settings:{foreground:"#50FA7B"}},{name:"Strings",scope:["string"],settings:{foreground:"#F1FA8C"}},{name:"String quotes (temporary vscode fix)",scope:["punctuation.definition.string.begin","punctuation.definition.string.end"],settings:{foreground:"#E9F284"}},{name:"Property quotes (temporary vscode fix)",scope:["punctuation.support.type.property-name.begin","punctuation.support.type.property-name.end"],settings:{foreground:"#8BE9FE"}},{name:"Docstrings",scope:["string.quoted.docstring.multi","string.quoted.docstring.multi.python punctuation.definition.string.begin","string.quoted.docstring.multi.python punctuation.definition.string.end","string.quoted.docstring.multi.python constant.character.escape"],settings:{foreground:"#6272A4"}},{name:"Variables and object properties",scope:["variable","constant.other.key.perl","support.variable.property","variable.other.constant.js","variable.other.constant.ts","variable.other.constant.tsx"],settings:{foreground:"#F8F8F2"}},{name:"Destructuring / aliasing reference name (LHS)",scope:["meta.import variable.other.readwrite","meta.object-binding-pattern-variable variable.object.property","meta.variable.assignment.destructured.object.coffee variable"],settings:{fontStyle:"italic",foreground:"#FFB86C"}},{name:"Destructuring / aliasing variable name (RHS)",scope:["meta.import variable.other.readwrite.alias","meta.export variable.other.readwrite.alias","meta.variable.assignment.destructured.object.coffee variable variable"],settings:{fontStyle:"normal",foreground:"#F8F8F2"}},{name:"GraphQL keys",scope:["meta.selectionset.graphql variable"],settings:{foreground:"#F1FA8C"}},{name:"GraphQL function arguments",scope:["meta.selectionset.graphql meta.arguments variable"],settings:{foreground:"#F8F8F2"}},{name:"GraphQL fragment name (definition)",scope:["entity.name.fragment.graphql","variable.fragment.graphql"],settings:{foreground:"#8BE9FD"}},{name:"Edge cases (foreground color resets)",scope:["constant.other.symbol.hashkey.ruby","keyword.operator.dereference.java","keyword.operator.navigation.groovy","meta.scope.for-loop.shell punctuation.definition.string.begin","meta.scope.for-loop.shell punctuation.definition.string.end","meta.scope.for-loop.shell string","storage.modifier.import","punctuation.section.embedded.begin.tsx","punctuation.section.embedded.end.tsx","punctuation.section.embedded.begin.jsx","punctuation.section.embedded.end.jsx","punctuation.separator.list.comma.css","constant.language.empty-list.haskell"],settings:{foreground:"#F8F8F2"}},{name:'Shell variables prefixed with "$" (edge case)',scope:["source.shell variable.other"],settings:{foreground:"#BD93F9"}},{name:"Powershell constants mistakenly scoped to `support`, rather than `constant` (edge)",scope:["support.constant"],settings:{fontStyle:"normal",foreground:"#BD93F9"}},{name:"Makefile prerequisite names",scope:["meta.scope.prerequisites.makefile"],settings:{foreground:"#F1FA8C"}},{name:"SCSS attibute selector strings",scope:["meta.attribute-selector.scss"],settings:{foreground:"#F1FA8C"}},{name:"SCSS attribute selector brackets",scope:["punctuation.definition.attribute-selector.end.bracket.square.scss","punctuation.definition.attribute-selector.begin.bracket.square.scss"],settings:{foreground:"#F8F8F2"}},{name:"Haskell Pragmas",scope:["meta.preprocessor.haskell"],settings:{foreground:"#6272A4"}},{name:"Log file error",scope:["log.error"],settings:{foreground:"#FF5555",fontStyle:"bold"}},{name:"Log file warning",scope:["log.warning"],settings:{foreground:"#F1FA8C",fontStyle:"bold"}}]},autoImport:!0,skipLanguages:[],filepath:"/Users/sshubam/website/website/pages/blog/subscriptions-and-live-queries-real-time-with-graphql.mdx"};function d(e){let o=Object.assign({p:"p",a:"a",h2:"h2",code:"code",hr:"hr",ol:"ol",li:"li",strong:"strong",h3:"h3",ul:"ul",del:"del"},(0,c.ah)(),e.components),{Video:t}=o;return i||h("CH",!1),i.Code||h("CH.Code",!0),t||h("Video",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.p,{children:"Subscriptions are the go-to solution for adding real-time capabilities to a GraphQL-powered\napplication. At the same time the term GraphQL Live Query floats around and can often be found in\nthe context of subscriptions."}),"\n",(0,n.jsxs)(o.p,{children:["While\n",(0,n.jsx)(o.a,{href:"https://spec.graphql.org/draft/#sec-Subscription",children:"GraphQL Subscriptions have been a part of the GraphQL Specification"}),"\nfor some time, GraphQL Live Queries are not part of the specification and further there is no RFC\ngoing on."]}),"\n",(0,n.jsxs)(o.p,{children:["However,\n",(0,n.jsx)(o.a,{href:"https://github.com/graphql/graphql-spec/issues/284",children:"discussion about GraphQL Live Queries started way back when GraphQL Subscriptions were designed"}),"."]}),"\n",(0,n.jsx)(o.p,{children:"So let's take a recap of GraphQL Subscriptions, take a look at existing Live Query Solutions today\nand compare the differences between the two solutions for real-time."}),"\n",(0,n.jsx)(o.h2,{id:"subscription-recap",children:"Subscription Recap"}),"\n",(0,n.jsxs)(o.p,{children:["The\n",(0,n.jsx)(o.a,{href:"https://github.com/graphql/graphql-spec/pull/267",children:"GraphQL Subscription RFC was merged back in March 2017"}),".\nThe first major and wide-adopted transport implementation was (and probably is)\n",(0,n.jsx)(o.a,{href:"https://npmjs.com/package/subscriptions-transport-ws",children:(0,n.jsx)(o.code,{children:"subscriptions-transport-ws"})}),". It was\ndeveloped by Apollo, but unfortunately they seem to have abandoned it since then. Fortunately, we\nnow have a successor ",(0,n.jsx)(o.a,{href:"https://github.com/enisdenjo/graphql-ws",children:(0,n.jsx)(o.code,{children:"graphql-ws"})}),"."]}),"\n",(0,n.jsx)(o.p,{children:"A subscription operation looks similar to this."}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"subscription",props:{style:{color:"#50FA7B"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"onPostAddedSubscription",props:{style:{color:"#50FA7B"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"onPostAdded",props:{style:{color:"#F1FA8C"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"post",props:{style:{color:"#F1FA8C"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"author",props:{style:{color:"#F1FA8C"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"login",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"In contrast to a GraphQL query operation, a subscription operation is only allowed to select a\nsingle field on the GraphQL Subscription root type."}),"\n",(0,n.jsx)(o.p,{children:"Furthermore, executing a subscription operation represents a stream of results where executing a\nquery operation only results in a single result."}),"\n",(0,n.jsxs)(o.p,{children:["Let's take a quick look at the ",(0,n.jsx)(o.code,{children:"graphql-js"})," reference implementation!"]}),"\n",(0,n.jsxs)(o.p,{children:["Since promises cannot represent multiple values over time, the ",(0,n.jsx)(o.code,{children:"graphql-js"})," reference\nimplementations uses ",(0,n.jsx)(o.a,{href:"https://tc39.es/ecma262/#sec-asynciterable-interface",children:(0,n.jsx)(o.code,{children:"AsyncIterator"})}),", which\nis a native structure similar to Observables (which one might already know by having dug a bit\ndeeper into the most-widely adopted GraphQL clients)."]}),"\n",(0,n.jsxs)(o.p,{children:["Each subscription root field must provide a ",(0,n.jsx)(o.code,{children:"subscribe"})," function that returns an ",(0,n.jsx)(o.code,{children:"AsyncIterator"})," and\noptionally has a ",(0,n.jsx)(o.code,{children:"resolve"})," function for mapping the published events."]}),"\n",(0,n.jsxs)(o.p,{children:["When a subscription operation is executed, the ",(0,n.jsx)(o.code,{children:"subscribe"})," function of that field resolver is called\nand the ",(0,n.jsx)(o.code,{children:"AsyncIterator"})," returned by it will be used as the source for the stream of events returned\nto the client."]}),"\n",(0,n.jsxs)(o.p,{children:["Once the ",(0,n.jsx)(o.code,{children:"AsyncIterator"})," publishes a value (the payload or event), the optional ",(0,n.jsx)(o.code,{children:"resolve"})," function\non the selected subscription root field is called with the value. All subsequently executed\nresolvers in the resolver/type tree behave like normal query resolvers."]}),"\n",(0,n.jsx)(o.p,{children:"The most basic implementation for a counter would look similar to this:"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const sleep ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" (t = ",props:{style:{color:"#F8F8F2"}}},{content:"1000",props:{style:{color:"#BD93F9"}}},{content:") ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" new Promise(",props:{style:{color:"#F8F8F2"}}},{content:"res",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" setTimeout(res, t))",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const resolvers ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  Subscription: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    countToNumber: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      subscribe: ",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" function",props:{style:{color:"#F8F8F2"}}},{content:"*",props:{style:{color:"#FF79C6"}}},{content:" (_, args) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" (let counter = ",props:{style:{color:"#F8F8F2"}}},{content:"1",props:{style:{color:"#BD93F9"}}},{content:"; counter ",props:{style:{color:"#F8F8F2"}}},{content:"<=",props:{style:{color:"#FF79C6"}}},{content:" args.toNumber; counter",props:{style:{color:"#F8F8F2"}}},{content:"++",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:") {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"yield",props:{style:{color:"#FF79C6"}}},{content:" { countToNumber: counter }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" sleep()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The above subscription will count up to the number provided via the ",(0,n.jsx)(o.code,{children:"toNumber"})," argument (while\nhaving a delay of one second between each message) and then complete."]}),"\n",(0,n.jsx)(o.p,{children:"Of course, in a real-world application we would like to subscribe to other event sources instead of\nsome static, pre-defined events."}),"\n",(0,n.jsxs)(o.p,{children:["The most common used (but not best maintained) library for such a PubSub engine in the GraphQL\ncontext is ",(0,n.jsx)(o.a,{href:"https://github.com/apollographql/graphql-subscriptions",children:(0,n.jsx)(o.code,{children:"graphql-subscriptions"})}),". There\nare also adapters available for more distributed systems (where all GraphQL API replicas must be\nnotified about the event) e.g. over Redis."]}),"\n",(0,n.jsxs)(o.p,{children:["If there is not need for scaling horizontally the ",(0,n.jsx)(o.code,{children:"graphql-subscriptions"})," package can be omitted and\nbe replaced with the Node.js native ",(0,n.jsx)(o.code,{children:"events"})," module:"]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { EventEmitter, on } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"events",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"export const createPubSub ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"TTopicPayload extends { [key: string]: unknown }",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:"(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  eventEmitter: EventEmitter",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:") ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    publish: ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"TTopic extends Extract",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"keyof TTopicPayload, string",props:{style:{color:"#F8F8F2"}}},{content:">>",props:{style:{color:"#FF79C6"}}},{content:"(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      topic: TTopic,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      payload: TTopicPayload[TTopic]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ) =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" void emitter.emit(topic ",props:{style:{color:"#F8F8F2"}}},{content:"as",props:{style:{color:"#FF79C6"}}},{content:" string, payload),",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    subscribe: ",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" function",props:{style:{color:"#F8F8F2"}}},{content:"*",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"TTopic extends Extract",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"keyof TTopicPayload, string",props:{style:{color:"#F8F8F2"}}},{content:">>",props:{style:{color:"#FF79C6"}}},{content:"(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      topic: TTopic",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ): AsyncIterableIterator",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"TTopicPayload[TTopic]",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      const asyncIterator = on(emitter, topic)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" (const [value] of asyncIterator) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"yield",props:{style:{color:"#FF79C6"}}},{content:" value",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const pubSub = createPubSub(new EventEmitter())",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"A (type-safe) PubSub implementation in 21 lines of code. We will use this for the example below."}),"\n",(0,n.jsxs)(o.p,{children:["In my opinion the different pub sub implementations should rather be based on EventEmitter instead\nof ",(0,n.jsx)(o.code,{children:"graphql-subscriptions"}),". A PubSub can but musn't be used together with GraphQL. By choosing the\nname ",(0,n.jsx)(o.code,{children:"graphql-subscriptions"})," it gives the impression that the logic is specific to GraphQL and\nreduces other possible contributions from people that need a similar event abstraction."]}),"\n",(0,n.jsx)(o.p,{children:"Therefore, I hope the next generation/iteration of Node.js PubSub implementations is less specific."}),"\n",(0,n.jsx)(o.p,{children:'Having said that, let\'s take a look at a more "real-world" like example of using subscriptions with\nPubSub:'}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const resolvers ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  Subscription: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onPostAdded: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      subscribe: ",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" function",props:{style:{color:"#F8F8F2"}}},{content:"*",props:{style:{color:"#FF79C6"}}},{content:" (_, _, context) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" (const { ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:" } of context.pubSub.subscribe(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"POST_ADDED",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:")) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          const post = ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" context.postStore.load(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:", context.viewer)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (post ",props:{style:{color:"#F8F8F2"}}},{content:"==",props:{style:{color:"#FF79C6"}}},{content:"= null) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            ",props:{style:{color:"#F8F8F2"}}},{content:"continue",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"          }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"yield",props:{style:{color:"#FF79C6"}}},{content:" { onPostAdded: loadedPost }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  Mutation: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    postAdd: (_, args, context) =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      const post = context.postStore.create(args)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" wo don",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"t wanna publish the whole object via our event emitter, the id should be sufficient",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"      context.pubSub.publish(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"POST_ADDED",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", { ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": args.id })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" post",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["Until now, we only took a look at the resolvers. Let's also quickly check the ",(0,n.jsx)(o.code,{children:"subscribe"})," function\nexported from ",(0,n.jsx)(o.code,{children:"graphql-js"}),", which can be used for executing subscriptions."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { subscribe } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const subscribeResult ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" subscribe({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  schema,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  document",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (isAsyncIterable(subscribeResult)) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" (const executionResult of subscribeResult) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    sendToClient(executionResult)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"} ",props:{style:{color:"#F8F8F2"}}},{content:"else",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  sendToClient(subscribeResult)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"subscribe"})," function returns either a ",(0,n.jsx)(o.code,{children:"AsyncIterable"})," that publishes multiple ",(0,n.jsx)(o.code,{children:"ExecutionResult"}),"s\nor a single ",(0,n.jsx)(o.code,{children:"ExecutionResult"})," in case the setup of the subscription somehow fails."]}),"\n",(0,n.jsxs)(o.p,{children:["The interesting thing is that we can use any transport for delivering the results to client. The\nmost popular implementation (as mentioned before) is ",(0,n.jsx)(o.code,{children:"subscriptions-transport-ws"}),". Unfortunately,\nsince it is poorly maintained, the GraphQL Working Group came up with a new implementation over\nWebSockets, ",(0,n.jsx)(o.a,{href:"https://github.com/enisdenjo/graphql-ws",children:(0,n.jsx)(o.code,{children:"graphql-ws"})}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["But we are not forced to use WebSockets at all.\n",(0,n.jsx)(o.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events",children:"Server Side Events"}),")\nmight be a more lightweight solution for both our server and client."]}),"\n",(0,n.jsxs)(o.p,{children:["It is actually a shame that the default ",(0,n.jsx)(o.code,{children:"express-graphql"})," reference HTTP transport implementation\ndoes not come with a built-in subscription solution."]}),"\n",(0,n.jsxs)(o.p,{children:["Fortunately, we now have libraries like\n",(0,n.jsx)(o.a,{href:"https://github.com/contrawork/graphql-helix",children:"Graphql Helix"}),", which, in my humble opinion, should\nreplace ",(0,n.jsx)(o.code,{children:"express-graphql"})," as the reference HTTP implementation since GraphQL Helix is also not tied\nto any web server framework."]}),"\n",(0,n.jsx)(o.p,{children:"For public GraphQL APIs, I am convinced that Server Sent Events is the future as there is less work\nrequired for implementing the protocol."}),"\n",(0,n.jsxs)(o.p,{children:["I also built\n",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-queries/tree/main/packages/socket-io-graphql-server",children:"my own transport over Socket.io"}),",\nwhich uses WebSockets by default and HTTP polling as a fallback."]}),"\n",(0,n.jsx)(o.p,{children:"As you can see, with GraphQL subscriptions, we are free to choose the best transport for our\napplication requirements!"}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.p,{children:"Now that we took a look at how GraphQL Subscription resolvers are implemented on the server-side,\nlets also check out how we can consume the GraphQL API on the client-side!"}),"\n",(0,n.jsx)(o.p,{children:"Usually we will have a network interface that is called by our favorite GraphQL client. Every single\nclient has a different name and implementation. Apollo calls them links, Relay calls them fetcher\nfunctions, and urql calls them exchanges."}),"\n",(0,n.jsx)(o.p,{children:"All of them have one thing in common. They are working with observable-like data structures, which\nbasically means for consuming subscriptions, all major GraphQL client-libraries decided to use\nObservables, instead of AsyncIterators (which are still not part of the ECMA Spec as of October\n2020)."}),"\n",(0,n.jsxs)(o.p,{children:["Like an AsyncIterator, an Observable can represent multiple values. As already mentioned, each\nclient library and transport have slightly different interfaces. I will use ",(0,n.jsx)(o.code,{children:"graphql-ws"})," with\n",(0,n.jsx)(o.code,{children:"relay-runtime"})," as an example."]}),"\n",(0,n.jsxs)(o.p,{children:["The example is taken straight from the ",(0,n.jsx)(o.code,{children:"graphql-ws"})," section."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { Network, Observable, RequestParameters, Variables } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"relay-runtime",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { createClient } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql-ws",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const subscriptionsClient ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" createClient({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  url: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"wss://i.love/graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  connectionParams: () =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    const session = getSession()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (",props:{style:{color:"#F8F8F2"}}},{content:"!",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"session) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" {}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      Authorization: ",props:{style:{color:"#F8F8F2"}}},{content:"`Bearer ",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{session.token}`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" yes, both fetch ",props:{style:{color:"#F8F8F2"}}},{content:"AND",props:{style:{color:"#BD93F9"}}},{content:" subscribe handled ",props:{style:{color:"#F8F8F2"}}},{content:"in",props:{style:{color:"#FF79C6"}}},{content:" one implementation",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"function fetchOrSubscribe(operation: RequestParameters, variables: Variables) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" Observable.create(",props:{style:{color:"#F8F8F2"}}},{content:"sink",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (",props:{style:{color:"#F8F8F2"}}},{content:"!",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"operation.text) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" sink.error(new Error(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"Operation text cannot be empty",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"))",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" subscriptionsClient.subscribe(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        operationName: operation.name,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        query: operation.text,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        variables",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"sink,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        error: err =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (err instanceof Error) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            sink.error(err)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          } ",props:{style:{color:"#F8F8F2"}}},{content:"else",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (err instanceof CloseEvent) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            sink.error(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              new Error(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"                ",props:{style:{color:"#F8F8F2"}}},{content:"`Socket closed ",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"with",props:{style:{color:"#FF79C6",fontStyle:"italic",textDecoration:"underline"}}},{content:" event ",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{err.code}`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"+",props:{style:{color:"#FF79C6"}}},{content:" err.reason",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"                  ",props:{style:{color:"#F8F8F2"}}},{content:"?",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"`: ",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{err.reason}`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" reason will be available on clean closes",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"                  : ",props:{style:{color:"#F8F8F2"}}},{content:"''",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"              )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          } ",props:{style:{color:"#F8F8F2"}}},{content:"else",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" GraphQLError[]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            sink.error(new Error(err.map(({ message }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" message).join(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", ",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:")))",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const network ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" Network.create(fetchOrSubscribe, fetchOrSubscribe)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const store ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new Store(new RecordSource())",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"export const environment ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new Environment({ network, store })",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"With this configuration, Relay can now execute subscription operations. Because the graphql-ws\nprotocol is way more complex than the GraphQL over HTTP protocol, we use the client exported from\nthe graphql-ws package instead. This results in some additional bundle-size. As mentioned before SSE\nmight be a better, lightweight alternative."}),"\n",(0,n.jsx)(o.p,{children:"That aside, let's start with a basic subscription that should update one of our components."}),"\n",(0,n.jsxs)(o.p,{children:["Our ",(0,n.jsx)(o.code,{children:"PostRender"})," already shows some content."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostQuery ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  query PostQuery(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"      title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      content {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        text",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      totalLikeCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(PostQuery, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"As a new feature requirement, the like count of the post should get updated once someone hits the\nlike button."}),"\n",(0,n.jsx)(o.p,{children:"We could choose different ways of implementing such a subscription."}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsx)(o.li,{children:"General Subscription for changed post"}),"\n"]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"subscription",props:{style:{color:"#50FA7B"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"PostChanged",props:{style:{color:"#50FA7B"}}},{content:"(",props:{style:{color:"#F8F8F2"}}},{content:"$postId",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}},{content:") {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"onPostChanged",props:{style:{color:"#F1FA8C"}}},{content:"(",props:{style:{color:"#F8F8F2"}}},{content:"postId",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" $postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"post",props:{style:{color:"#F1FA8C"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"totalLikeCount",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsx)(o.li,{children:"Specific Subscription"}),"\n"]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"subscription",props:{style:{color:"#50FA7B"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"PostLikeCountChanged",props:{style:{color:"#50FA7B"}}},{content:"(",props:{style:{color:"#F8F8F2"}}},{content:"$postId",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}},{content:") {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"onPostLikeCountChanged",props:{style:{color:"#F1FA8C"}}},{content:"(",props:{style:{color:"#F8F8F2"}}},{content:"postId",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" $postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"totalLikeCount",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"Both solutions have different implications."}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsx)(o.li,{children:"General Subscription for changed post"}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["This approach is not limited to notifying whether the ",(0,n.jsx)(o.code,{children:"totalLikeCount"})," of the post likes have\nchanged; in the future we could adjust the selection set on the post field as it also returns a\n",(0,n.jsx)(o.code,{children:"Post"})," type similar to our already existing ",(0,n.jsx)(o.code,{children:"Query.post"})," field. It will automatically update the\npost record already in the cache as the Relay store (similar to other clients) can identify the post\nobject via the id field. The drawback is that we could potentially send too much data over the wire.\nE.g. if we also wanted to subscribe to title changes all additional selected fields are sent to the\nclient each time the underlying event is emitted, even if only the ",(0,n.jsx)(o.code,{children:"totalLikeCount"})," value has\nchanged."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostChangedSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostChanged(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onPostChanged(postId: ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      post {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"        totalLikeCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(PostQuery, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" thats ",props:{style:{color:"#F8F8F2"}}},{content:"all",props:{style:{color:"#8BE9FD"}}},{content:" we gotta do",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  useSubscription(PostChangedSubscription, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsx)(o.li,{children:"Specific Subscription"}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["This subscription is specifically designed for only an update of the ",(0,n.jsx)(o.code,{children:"totalCount"}),". However, the\nsubscription result returns no ",(0,n.jsx)(o.code,{children:"Post"})," type. Therefore, we cannot make use of the automatic cache\nupdates via the ",(0,n.jsx)(o.code,{children:"id"}),". We have to additionally define a handler for updating the post in the cache."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostLikeCountChangedSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostLikeCountChanged(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onPostLikeCountChanged(postId: ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      totalCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(PostQuery, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  useSubscription(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    PostLikeCountChangedSubscription,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" we need to manually update the cache :(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      updater: (store, payload) =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        const record = store.get(postId)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (record) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          record.setValue(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"totalLikeCount",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", payload.onPostLikeCountChanged.totalCount)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"Obviously, for this example, no sane person would actually want to choose the second solution over\nthe first one."}),"\n",(0,n.jsx)(o.p,{children:"But as our business requirements might get more complex we might need to do manual cache updates."}),"\n",(0,n.jsx)(o.p,{children:'A very good example for this is lists. Imagine us having a set of data in which a single item\nchanges. The "easy to implement" solution would be to just refetch the complete list every time a\nsingle item is added/removed/changed. However, For a list containing hundreds of items only sending\nthe changed item to the client might be the smarter and faster solution...'}),"\n",(0,n.jsx)(o.p,{children:"This can be implemented via a union type."}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserAdded",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  user",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"User",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserRemoved",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  removedUserId",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"union",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserListChange",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" = ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserAdded",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" | ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserRemoved",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Subscription",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  onUserListChange",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"OnUserListChange",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"The corresponding code, including handling the cache updates:"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const UserListQuery ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  query UserListQuery {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    users {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"      name",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const UserListChangeSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription UserListChangeSubscription {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onUserListChange {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      __typename",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:" on OnUserAdded {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        user {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"          name",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:" on OnUserRemoved {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        removedUserId",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const UserListRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(UserListQuery)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  useSubscription(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    UserListChangeSubscription,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" we need to manually update the cache :(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      updater: (store, payload) =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        const rootField = store.getRootField()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        const users = rootField.getLinkedRecords(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"users",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (users) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          switch (payload.onUserListChange.__typename) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            case ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"OnUserAdded",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:": {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              const newUser = store.create(payload.onUserListChange.user.id, ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"User",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              newUser.setValue(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"name",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", payload.onUserListChange.user.name)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              rootField.setLinkedRecords(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"users",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", [",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"users, newUser])",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              ",props:{style:{color:"#F8F8F2"}}},{content:"break",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"            }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"            case ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"onUserRemoved",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:": {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              rootField.setLinkedRecords(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"                users.map(",props:{style:{color:"#F8F8F2"}}},{content:"user",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" user.getDataID() ",props:{style:{color:"#F8F8F2"}}},{content:"!==",props:{style:{color:"#FF79C6"}}},{content:" payload.onUserListChange.removedUserId)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"              ",props:{style:{color:"#F8F8F2"}}},{content:"break",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"            }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"UserList {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"As our application grows the manual cache update code can become so complex and confusing that I\nhave considered switching back into simply refetching the queries in some applications."}),"\n",(0,n.jsxs)(o.p,{children:["Fortunately, Relay contributors have\n",(0,n.jsx)(o.a,{href:"https://github.com/facebook/relay/issues/3123",children:"worked on some nice query directives"})," that allow\nreducing such cache update code. It won't cover all cases though."]}),"\n",(0,n.jsx)(o.p,{children:"In all of the above examples we responded (more or less implicitly) to data change events."}),"\n",(0,n.jsx)(o.p,{children:"Subscriptions can be used to apply data changes on the client. But they are probably not the best\ntool for that."}),"\n",(0,n.jsx)(o.p,{children:"Before taking a look of what could be a better tool, let's look at another usage example for\nsubscriptions."}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const OnPlaySound ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription OnPlayChatSound {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onPlayChatSound {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      soundUrl",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const ChatRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" () ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const chat = useQuery(ChatQuery)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  useSubscription(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    OnPlaySound,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    useMemo({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      onNext: payload =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        playSound(payload.onPlayChatSound.soundUrl)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Chat chat={chat} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"The difference here is that we are not manipulating our existing data but rather executing a side\neffect."}),"\n",(0,n.jsx)(o.p,{children:"Subscriptions can also be used for side effects that should not alter or touch any data in the\ncache."}),"\n",(0,n.jsx)(o.h2,{id:"live-queries",children:"Live Queries"}),"\n",(0,n.jsx)(o.p,{children:"What is a live query? Well, there is no specification for that so the term is ambiguous. Today,\nthere are several solutions one could describe as live queries."}),"\n",(0,n.jsxs)(o.p,{children:["All those solutions have one thing in common: ",(0,n.jsx)(o.strong,{children:"Trying to keep the client state in sync with the\nserver"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["Which can be paraphrased as ",(0,n.jsx)(o.strong,{children:"observing data"}),"."]}),"\n",(0,n.jsx)(o.p,{children:"Before we take a look at how all of those implementations, let's break down what we should or can\nexpect from a live query implementation."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Automatically update the clients"})}),"\n",(0,n.jsx)(o.p,{children:"This is one is pretty obvious. The live query implementation should keep the client state as close\nto the server state as possible."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Efficiently update clients"})}),"\n",(0,n.jsx)(o.p,{children:"If only a part of our data has changed we don't necessarily need to send the complete execution\nresult over the wire. Only sending the changed parts might be more efficient. In general the network\noverhead should be minimal."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Flexibility"})}),"\n",(0,n.jsx)(o.p,{children:"Ideally a solution should not be tied to a specific database or coupled with some SaaS service that\nwon't be around next year."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Adoptability"})}),"\n",(0,n.jsx)(o.p,{children:"In case we already have some kind of GraphQL schema or server implementation, the live query\nsolution should be adobtable without changing everything and starting new."}),"\n",(0,n.jsx)(o.h2,{id:"polling-a-query",children:"Polling a Query"}),"\n",(0,n.jsx)(o.p,{children:"The easiest solution for implementing live queries would be to poll a query in intervals. Most\nGraphQL clients have such a feature already implemented."}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostQuery ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  query PostQuery(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"      title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      content {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        text",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      likes {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        totalCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    PostQuery,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      pollIntervall: ",props:{style:{color:"#F8F8F2"}}},{content:"5000",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Automatically updates clients. ",(0,n.jsx)(o.strong,{children:"No."})," ❌"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Depending upon the use-case, this could be a valid solution, but for true real-time applications\nthat require instant feedback, this is not precise enough due to the delay caused by the poll\ninterval."}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsxs)(o.li,{children:["Efficiently updates clients. ",(0,n.jsx)(o.strong,{children:"No."})," ❌"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"The whole execution result is sent over to the client for every single time the operation is\nre-executed. A lot more data than necessary is transported over the wire to the client even if\nnothing has changed from the last poll interval."}),"\n",(0,n.jsxs)(o.ol,{start:"3",children:["\n",(0,n.jsxs)(o.li,{children:["Flexibility. ",(0,n.jsx)(o.strong,{children:"High."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Straight forward, as this does not rely on any changes on the server and only slight changes on our\nfrontend."}),"\n",(0,n.jsxs)(o.ol,{start:"4",children:["\n",(0,n.jsxs)(o.li,{children:["Adoptability. ",(0,n.jsx)(o.strong,{children:"High."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Straight forward, again almost no changes required."}),"\n",(0,n.jsx)(o.h2,{id:"live-queries-over-subscriptions",children:"Live Queries over Subscriptions"}),"\n",(0,n.jsx)(o.p,{children:'We already had a "live query over subscription"-like example above.'}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostChangedSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostChanged(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    onPostChanged(postId: ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      post {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"        title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        likes {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          totalCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useQuery(PostQuery, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" thats ",props:{style:{color:"#F8F8F2"}}},{content:"all",props:{style:{color:"#8BE9FD"}}},{content:" we gotta do",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  useSubscription(PostChangedSubscription, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["Let's ditch the ",(0,n.jsx)(o.code,{children:"PostQuery"})," completely and instead use a ",(0,n.jsx)(o.code,{children:"PostSubscription"})," that always emits an\ninitial event."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostSubscription(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"      title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      likes {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        totalCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const PostRenderer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" ({ postId }: { postId: string }) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const { props } = useSubscription(PostChangedSubscription, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" variables ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" { postId })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"<",props:{style:{color:"#FF79C6"}}},{content:"Post {",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"props} ",props:{style:{color:"#F8F8F2"}}},{content:"/>",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"A server resolver implementation could look similar to this:"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const resolvers ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  Subscription: {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    post: ",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" function",props:{style:{color:"#F8F8F2"}}},{content:"*",props:{style:{color:"#FF79C6"}}},{content:" (_, { ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:" }, context) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      let loadPost = () =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" context.postStore.load(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:", context.viewer)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" publish first post",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"yield",props:{style:{color:"#FF79C6"}}},{content:" { post: ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" loadPost() }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" publish post again once change event ",props:{style:{color:"#F8F8F2"}}},{content:"is",props:{style:{color:"#FF79C6"}}},{content:" emitted",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" (const _ of context.pubSub.subscribe(",props:{style:{color:"#F8F8F2"}}},{content:"`Post:",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:"}`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:")) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"yield",props:{style:{color:"#FF79C6"}}},{content:" { post: ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" loadPost() }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"We replace two operations with a single one!"}),"\n",(0,n.jsxs)(o.p,{children:["A similar approach is used by\n",(0,n.jsx)(o.a,{href:"https://github.com/hasura/graphql-engine/blob/master/architecture/live-queries.md",children:"Hasura"})," and also\n",(0,n.jsx)(o.a,{href:"https://graphile.org/postgraphile/live-queries",children:"PostGraphile"}),"."]}),"\n",(0,n.jsx)(o.p,{children:"The obvious drawback of both platforms is the lock-in into using a specific database. Of course that\nmight not be a problem for most people, but having a general solution that works with any data\nsource would be nice as more complex schema could fetch from different database types or other third\nparty APIs."}),"\n",(0,n.jsx)(o.p,{children:"Those implementations keep track of all the resources in the execution result and re-execute the\nsubscription operation once any of those resources changes."}),"\n",(0,n.jsx)(o.p,{children:"The resolver implementation above only responds to emitted post changes. In order keep track of all\nthe resources defined in an operation's selection set, we will have to come up with a smart\nabstraction."}),"\n",(0,n.jsx)(o.p,{children:"Another drawback of subscriptions for live queries is the limitation of only selecting one root\nsubscription field, which is defined by the GraphQL subscription specification. Furthermore, we must\nalso redeclare our query type fields to the subscription type."}),"\n",(0,n.jsx)(o.p,{children:"There is a workaround we can apply for re-exporting the whole Query type via a sub-field in the\nsubscription type."}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Query",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  user(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}},{content:")",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"User",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"  post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}},{content:")",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Post",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Subscription",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  live",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Query",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"This approach would allow us to query everything on the query object type via the live field on the\nsubscription object type, without having the limit of only being able to query one resource or\nhaving to redeclare every resource field resolver on the subscription type. Neat!"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostSubscription(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!, ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"userId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    live {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"        title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        totalLikeCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      user(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"userId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"        name",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"Okay, now we can select everything we could have selected with our query operation!"}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Automatically updates clients. ",(0,n.jsx)(o.strong,{children:"Yes."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"When using services like PostGraphile and Hasura that is the case. However, for any additional\nresolvers that are added on top of the service schema, we cannot implement an invalidation\nmechanism. In user-land we will have to come up with an implementation of resource tracking by\nourselves."}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsxs)(o.li,{children:["Efficiently updates clients. ",(0,n.jsx)(o.strong,{children:"No."})," ❌"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"The whole execution result is sent over to the client for every single time a live query is\ninvalidated."}),"\n",(0,n.jsxs)(o.ol,{start:"3",children:["\n",(0,n.jsxs)(o.li,{children:["Flexibility. ",(0,n.jsx)(o.strong,{children:"Low."})," ❌"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Both Hasura and PostGraphile are tightly coupled to a python database. For any custom resolvers, we\nhave to come up with the mechanism for resource tracking and invalidation ourselves."}),"\n",(0,n.jsxs)(o.ol,{start:"4",children:["\n",(0,n.jsxs)(o.li,{children:["Adoptability. ",(0,n.jsx)(o.strong,{children:"Low."})," ❌"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Switching to a server powered by PostGraphile or Hasura with an already existing GraphQL schema is\nno easy task."}),"\n",(0,n.jsx)(o.h2,{id:"graphql-live-queries-over-subscriptions-with-json-patch",children:"GraphQL Live Queries over Subscriptions with JSON Patch"}),"\n",(0,n.jsx)(o.p,{children:"Ideally, we only want to send a patch to the client that provides instructions on how to get from\nthe previous execution result to the next. The lack of these instructions has been a big flaw in the\nprevious two implementations."}),"\n",(0,n.jsxs)(o.p,{children:["The RFCs and implementations for the ",(0,n.jsx)(o.code,{children:"@defer"})," and ",(0,n.jsx)(o.code,{children:"@stream"}),' introduced ways of sending (delayed)\npartial results to clients. However, those "patch" operations are currently highly limited to a\n"replace at path" and "append to list" operation.']}),"\n",(0,n.jsxs)(o.p,{children:["A format such as ",(0,n.jsx)(o.a,{href:"https://tools.ietf.org/html/rfc6902",children:"JSON Patch"})," might be a better alternative for\nlive queries."]}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.a,{href:"https://github.com/D1plo1d/graphql-live-subscriptions",children:(0,n.jsx)(o.code,{children:"graphql-live-subscriptions"})})," tries to solve\nthat with ",(0,n.jsx)(o.code,{children:"Subscription.live"})," field that exposes both a ",(0,n.jsx)(o.code,{children:"Query"})," and a JSON patch field."]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsxs)(o.strong,{children:["Schema Types for ",(0,n.jsx)(o.code,{children:"graphql-live-subscriptions"})]})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"scalar",props:{style:{color:"#FF79C6"}}},{content:" JSON",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"RFC6902Operation",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  op",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"String",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"  path",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"String",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"  from",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"String",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"  value",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"JSON",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"LiveQuery",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  patch",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" [",props:{style:{color:"#F8F8F2"}}},{content:"RFC6902Operation",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  query",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Query",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"type",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"Subscription",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  live",props:{style:{color:"#F8F8F2"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"LiveQuery",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["A live query operation can be declared similar to our ",(0,n.jsx)(o.code,{children:"PostSubscription"})," document above."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"const PostSubscription ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" graphql",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"  subscription PostSubscription(",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!, ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"userId: ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#BD93F9"}}},{content:"!) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    live {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      query {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        post(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"postId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"          title",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          totalLikeCount",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        user(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"userId) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"          name",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      patch {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        op",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        path",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"        value",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The difference is that the type returned by the ",(0,n.jsx)(o.code,{children:"live"})," field has two fields instead of a single one.\nThe ",(0,n.jsx)(o.code,{children:"query"})," field, which selects the selection set from ",(0,n.jsx)(o.code,{children:"Query"})," type and a ",(0,n.jsx)(o.code,{children:"patch"})," field which is a\nJSON Patch operation. When executing the given operation against the server the initial result will\nhave the data selected by the ",(0,n.jsx)(o.code,{children:"query"})," field selection set included. All following values will have\nno ",(0,n.jsx)(o.code,{children:"query"})," value (",(0,n.jsx)(o.code,{children:"null"}),"), but instead an array of patch operations that describe the changes for\nupdating the last result to the next result."]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Initial result"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"data",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"live",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"query",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"post",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"1",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"title",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"foo",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"totalLikeCount",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"10",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"        },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"user",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"10",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"name",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"Laurin",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"patch",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"null",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Patch result (increase totalLikeCount)"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"data",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"live",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"query",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"null",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"    },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"patch",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" [",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"op",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"replace",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"path",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"post/totalLikeCount",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"from",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"null",props:{style:{color:"#BD93F9"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"value",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"11",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The clients must then implement the logic for\n",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-chat/blob/27a0b902e9098c7cc0f92ccd6f36f7d7e28a9677/packages/frontend/src/jsonpatch.python#L10-L72",children:"applying the patch operation to their client cache"}),"\nor for applying the patches on the initial result in the network/fetcher/link layer."]}),"\n",(0,n.jsxs)(o.p,{children:["The server implementation uses an event emitter and an immutable state tree for detecting changes\nthat must be sent to clients. The patch is automatically generated from the next immutable state\nthat is compared against the last which got emitted via an ",(0,n.jsx)(o.code,{children:"EventEmitter"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["While the idea is quite nice, the implementation is obviously meant for backends that already use\nreactive or immutable data structures. Having to rewrite our existing GraphQL layer to support live\nqueries is a big trade-off. Furthermore, the library is not maintained that well. I've made PRs to\nmake the library compatible with recent GraphQL versions, but these have yet to be merged. Using\nunions and interfaces is not possible. Having to patch a library with ",(0,n.jsx)(o.code,{children:"patch-package"})," before even\nbeing usable is generally a bad sign."]}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Automatically updates clients. ",(0,n.jsx)(o.strong,{children:"Yes."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"When implementing our schema conform to the library, this library delivers precise results once the\nimmutable state has changed."}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsxs)(o.li,{children:["Efficiently updates clients. ",(0,n.jsx)(o.strong,{children:"Yes."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Initially a result tree is sent to the client. Afterwards, only JSON patches that must be applied to\nthe initial result are sent to the client."}),"\n",(0,n.jsxs)(o.ol,{start:"3",children:["\n",(0,n.jsxs)(o.li,{children:["Flexibility. ",(0,n.jsx)(o.strong,{children:"Kind of."})," ✳️"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"We don't rely on any third party services, however, we forced into immutability to some extend."}),"\n",(0,n.jsxs)(o.ol,{start:"4",children:["\n",(0,n.jsxs)(o.li,{children:["Adoptability. ",(0,n.jsx)(o.strong,{children:"It depends."})," ✳️"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Adding an immutable layer to our existing schema might be a pretty big change. Furthermore, the\nlibrary does lack support for some GraphQL features such as Interfaces and Unions."}),"\n",(0,n.jsxs)(o.h2,{id:"graphql-live-queries-via-the-live-directive",children:["GraphQL Live Queries via the ",(0,n.jsx)(o.code,{children:"@live"})," Directive"]}),"\n",(0,n.jsxs)(o.p,{children:["There are companies out there, like ",(0,n.jsx)(o.a,{href:"https://youtube.com/watch?v=BSw05rJaCpA",children:"Facebook"}),", that are\nalready using this approach. There is also a GraphQL framework available in Go that supports live\nqueries out of the box! Check out thunder ",(0,n.jsx)(o.a,{href:"https://github.com/samsarahq/thunder",children:"here"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["The idea behind the ",(0,n.jsx)(o.code,{children:"@live"})," directive is that it is used to mark that the client is interested in\nkeeping that query execution result as up to date as possible. The implementation, however, is up to\nuser-land."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"query",props:{style:{color:"#FF79C6"}}},{content:" (",props:{style:{color:"#F8F8F2"}}},{content:"$id",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"ID",props:{style:{color:"#8BE9FD",fontStyle:"italic"}}},{content:"!",props:{style:{color:"#FF79C6"}}},{content:") ",props:{style:{color:"#F8F8F2"}}},{content:"@live",props:{style:{color:"#50FA7B"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"post",props:{style:{color:"#F1FA8C"}}},{content:"(",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" $id) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"title",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"totalLikeCount",props:{style:{color:"#F1FA8C"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"graphql"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"The idea of just making any query without additional overhead a live query is very appealing from\nthe view of a frontend developer. From a backend perspective, however that raises new questions.\nJust adding a directive on the operation on frontend won't make the whole backend reactive."}),"\n",(0,n.jsxs)(o.p,{children:["After having built an example app with ",(0,n.jsx)(o.code,{children:"graphql-live-subscriptions"})," from scratch, studying the flaws\nof that library and being uncomfortable with the vendor lock-in of services such as PostGraphile and\nHasura, I decided to approach the problem of live queries in a more pluggable way, by using the\n",(0,n.jsx)(o.code,{children:"@live"})," directive."]}),"\n",(0,n.jsxs)(o.h3,{id:"n1ru4lgraphql-live-query-a-common-definition-and-set-of-utilities-for-determining-of-a-live-query",children:[(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query"})," A Common Definition and Set of Utilities for Determining of a Live Query"]}),"\n",(0,n.jsx)(o.p,{children:"This module provides two things."}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.code,{children:"GraphQLLiveDirective"})," that can be added to any schema."]}),"\n"]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { GraphQLSchema, specifiedDirectives } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { GraphQLLiveDirective } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/graphql-live-query",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { query, mutation, subscription } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"./schema",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const schema ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new GraphQLSchema({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  query,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  mutation,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  subscription,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  directives: [GraphQLLiveDirective, ",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" Keep ",props:{style:{color:"#F8F8F2"}}},{content:"@",props:{style:{color:"#FF79C6"}}},{content:"defer",props:{style:{color:"#F8F8F2"}}},{content:"/@",props:{style:{color:"#FF79C6"}}},{content:"stream",props:{style:{color:"#F8F8F2"}}},{content:"/@if/@",props:{style:{color:"#FF79C6"}}},{content:"skip ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"specifiedDirectives]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.code,{children:"isLiveQueryOperationDefinitionNode"})}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["This is a simple function that takes a ",(0,n.jsx)(o.code,{children:"OperationDefinitionNode"})," and returns ",(0,n.jsx)(o.code,{children:"true"})," if it is a live\nquery document."]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/tree/main/packages/graphql-live-query",children:"These utility functions can be found here on Github"})}),"\n",(0,n.jsx)(o.p,{children:"Those functions alone might not seem that helpful alone, but they are a contract live query\nexecution engines could built on. Such as the package we are talking about next \uD83D\uDE07."}),"\n",(0,n.jsxs)(o.h3,{id:"n1ru4lin-memory-live-query-store-keep-track-and-invalidate-resources-selected-by-a-live-query-in-an-efficient-but-generic-way",children:[(0,n.jsx)(o.code,{children:"@n1ru4l/in-memory-live-query-store"})," Keep Track and Invalidate Resources Selected by a Live Query in an Efficient, but Generic Way"]}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"InMemoryLiveQueryStore.execute"})," function is a drop in replacement for the ",(0,n.jsx)(o.code,{children:"execute"})," function\nprovided by the ",(0,n.jsx)(o.code,{children:"graphql"})," package."]}),"\n",(0,n.jsxs)(o.p,{children:["When encountering a query operation that is marked with the ",(0,n.jsx)(o.code,{children:"@live"})," directive it will return a\n",(0,n.jsx)(o.code,{children:"AsyncIterator"})," instead of a ",(0,n.jsx)(o.code,{children:"Promise"})," that can be used for sending multiple results to the client.\nSimilar to how ",(0,n.jsx)(o.code,{children:"subscribe"})," (or ",(0,n.jsx)(o.code,{children:"defer"}),"/",(0,n.jsx)(o.code,{children:"stream"}),") works."]}),"\n",(0,n.jsxs)(o.p,{children:["Internally, the store keeps track of the resources selected in the live query operation selection\nset. That means all root query field coordinates (e.g. ",(0,n.jsx)(o.code,{children:"Query.post"}),") and global resource identifiers\n(e.g. ",(0,n.jsx)(o.code,{children:"Post:1"}),"). The store can then be notified to re-execute live query operations that select a\ngiven root query field or resource identifier via the ",(0,n.jsx)(o.code,{children:"InMemoryLiveQueryStore.invalidate"})," method\nwith the corresponding resource identifier or field coordinates. A resource identifier is composed\nout of the type name and the actual resolved id value separated by a colon, but this behavior can be\ncustomized. For ensuring that the store keeps track of all our query resources we should always\nselect the id field on our object types. The store will only keep track of fields with the name id\nand the type ",(0,n.jsx)(o.code,{children:"ID!"})," (",(0,n.jsx)(o.code,{children:"GraphQLNonNull(GraphQLID)"}),")."]}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { InMemoryLiveQueryStore } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/in-memory-live-query-store",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { parse } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { schema } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"./schema",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const inMemoryLiveQueryStore ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new InMemoryLiveQueryStore()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const rootValue ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  todos: [",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"1",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      content: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"Foo",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      isComplete: false",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ]",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"inMemoryLiveQueryStore",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  .execute({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    schema,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    operationDocument: parse(",props:{style:{color:"#F8F8F2"}}},{content:"/*",props:{style:{color:"#FF79C6"}}},{content:" GraphQL ",props:{style:{color:"#F8F8F2"}}},{content:"*/",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"      query todosQuery ",props:{style:{color:"#F8F8F2"}}},{content:"@",props:{style:{color:"#FF79C6"}}},{content:"live {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        todos {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}}]},{tokens:[{content:"          content",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"          isComplete",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"`),",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}}]},{tokens:[{content:"    rootValue: rootValue,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    contextValue: {},",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    variableValues: null,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    operationName: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"todosQuery",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"  })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  .then(",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"result",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (isAsyncIterable(result)) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" (const value of result) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" Send to client ",props:{style:{color:"#F8F8F2"}}},{content:"in",props:{style:{color:"#FF79C6"}}},{content:" real",props:{style:{color:"#F8F8F2"}}},{content:"-",props:{style:{color:"#FF79C6"}}},{content:"world app :)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        console.log(value)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" Invalidate by resource identifier",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"rootValue.todos[",props:{style:{color:"#F8F8F2"}}},{content:"0",props:{style:{color:"#BD93F9"}}},{content:"].isComplete = true",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"inMemoryLiveQueryStore.invalidate(",props:{style:{color:"#F8F8F2"}}},{content:"`Todo:",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"1",props:{style:{color:"#BD93F9",fontStyle:"italic",textDecoration:"underline"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" Invalidate by root query field coordinate",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"rootValue.todos.push({ ",props:{style:{color:"#F8F8F2"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:": ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"2",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", content: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"Baz",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", isComplete: false })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"inMemoryLiveQueryStore.invalidate(",props:{style:{color:"#F8F8F2"}}},{content:"`Query.todos`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"When using an ORM such as Prisma, we can simply add a middleware for automatically invalidating\nresources."}),"\n",(0,n.jsx)(t,{src:"https://youtube.com/embed/iamn8fZSEXc",title:"GraphQL Live Queries (in-memory)"}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Use Prisma middleware for resource invalidation"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" Register Middleware ",props:{style:{color:"#F8F8F2"}}},{content:"for",props:{style:{color:"#FF79C6"}}},{content:" automatic model invalidation",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"prisma.",props:{style:{color:"#F8F8F2"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"use(",props:{style:{color:"#F8F8F2"}}},{content:"async",props:{style:{color:"#FF79C6"}}},{content:" (params, ",props:{style:{color:"#F8F8F2"}}},{content:"next",props:{style:{color:"#8BE9FD"}}},{content:") ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  const resultPromise = ",props:{style:{color:"#F8F8F2"}}},{content:"next",props:{style:{color:"#8BE9FD"}}},{content:"(params)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (params.action ",props:{style:{color:"#F8F8F2"}}},{content:"==",props:{style:{color:"#FF79C6"}}},{content:"= ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"update",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:") {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    resultPromise.then(",props:{style:{color:"#F8F8F2"}}},{content:"res",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (res",props:{style:{color:"#F8F8F2"}}},{content:"?",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:".id) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" invalidate ",props:{style:{color:"#F8F8F2"}}},{content:"`Post:",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"1",props:{style:{color:"#BD93F9",fontStyle:"italic",textDecoration:"underline"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:" on update",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        liveQueryStore.invalidate(",props:{style:{color:"#F8F8F2"}}},{content:"`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{params.model}:",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:"$",props:{style:{color:"#FF5555",fontStyle:"italic",textDecoration:"underline"}}},{content:"{res.id}`",props:{style:{color:"#F8F8F2",fontStyle:"italic",textDecoration:"underline"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    })",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" resultPromise",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"In case we have multiple server replicas some PubSub implementation can be used for distributing the\nevents."}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"PubSub with Redis"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" Redis ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"ioredis",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const redis ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new Redis()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"redis.subscribe(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"invalidations",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"redis.on(",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"message",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:", (channel, message) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:"if",props:{style:{color:"#FF79C6"}}},{content:" (channel ",props:{style:{color:"#F8F8F2"}}},{content:"==",props:{style:{color:"#FF79C6"}}},{content:"= ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"invalidations",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:") {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" message ",props:{style:{color:"#F8F8F2"}}},{content:"is",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"Post:1",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"    liveQueryStore.invalidate(message)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The transports ",(0,n.jsx)(o.code,{children:"graphql-ws"})," (GraphQL over WebSocket), ",(0,n.jsx)(o.code,{children:"graphql-helix"})," (GraphQL over SEE) and\n",(0,n.jsx)(o.code,{children:"@n1ru4l/socket-io-graphql-server"})," (GraphQL over Socket.io), support providing a custom ",(0,n.jsx)(o.code,{children:"execute"}),"\nfunction that is allowed to return AsyncIterables (thanks to the recent changes required for\n",(0,n.jsx)(o.code,{children:"@defer"})," and ",(0,n.jsx)(o.code,{children:"@stream"}),"). All we have to do is to pass the ",(0,n.jsx)(o.code,{children:"InMemoryLiveQueryStore.execute"})," to our\nserver factory!"]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Example with graphql-ws"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" http ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"http",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" ws ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"ws",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"//",props:{style:{color:"#FF79C6"}}},{content:" yarn add ws",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { useServer } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql-ws/lib/use/ws",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { subscribe } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { InMemoryLiveQueryStore } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/in-memory-live-query-store",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { parse } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { schema } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"./schema",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const inMemoryLiveQueryStore ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new InMemoryLiveQueryStore()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const server ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" http.createServer(function weServeSocketsOnly(_, res) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  res.writeHead(",props:{style:{color:"#F8F8F2"}}},{content:"404",props:{style:{color:"#BD93F9"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  res.end()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const wsServer ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" new ws.Server({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  server,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  path: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"/graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"useServer(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    schema,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    execute: inMemoryLiveQueryStore.execute,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    subscribe",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  wsServer",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"server.listen(",props:{style:{color:"#F8F8F2"}}},{content:"443",props:{style:{color:"#BD93F9"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The best thing is you can start playing around with it today! The fully functional implementation is\navailable as\n",(0,n.jsxs)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/tree/main/packages/in-memory-live-query-store",children:[(0,n.jsx)(o.code,{children:"@n1ru4l/in-memory-live-query-store"})," on Github"]}),".\nFeel free to create any issues regarding missing features or documentation. Let's shape the future\nfor GraphQL live queries together!"]}),"\n",(0,n.jsxs)(o.h3,{id:"n1ru4lgraphql-live-query-patch-optional-json-patch-middleware-for-smaller-payloads-over-the-wire",children:[(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch"}),": Optional JSON Patch Middleware for Smaller Payloads over the Wire"]}),"\n",(0,n.jsx)(o.p,{children:"GraphQL's execution result payloads can become quite huge. Sending those over the wire can be\nexpensive at some point. Especially when they are sent often for fast updating state. JSON patch is\na handy standard for only sending change instructions over the wire which can potentially reduce\nsuch huge payloads."}),"\n",(0,n.jsx)(o.p,{children:"Instead of having JSON patches enabled by default, it is a totally optional module, that can be\napplied on the client and the server for deflating (create patches on the server) and inflating\n(apply patches on the client) the execution results. Smaller projects might even be better off not\nusing JSON patch at all, as the patch payload might be bigger than the whole query result."}),"\n",(0,n.jsx)(o.p,{children:"The patches are created by comparing the latest execution result with the previous execution result.\nThat means the server will always have to store the latest execution result as long as the live\nquery is active."}),"\n",(0,n.jsx)(o.p,{children:"Here are some example execution results after applying the patch generator"}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Initial result"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"data",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"post",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"1",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"title",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"foo",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"totalLikeCount",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"10",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"    },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"user",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"id",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"10",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"name",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"Laurin",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"revision",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"1",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Patch result (increase totalLikeCount)"})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"patch",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" [",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"op",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"replace",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"path",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:"post/totalLikeCount",props:{style:{color:"#F1FA8C"}}},{content:'"',props:{style:{color:"#E9F284"}}},{content:",",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"value",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"11",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"    }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ],",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  ",props:{style:{color:"#F8F8F2"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:"revision",props:{style:{color:"#8BE9FD"}}},{content:'"',props:{style:{color:"#8BE9FE"}}},{content:":",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"2",props:{style:{color:"#BD93F9"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"On the server adding the patch generation middleware is easy function composition:"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { flow } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"fp-python/function",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { createApplyLiveQueryPatchGenerator } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/graphql-live-query-patch",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const applyLiveQueryPatchGenerator ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" createApplyLiveQueryPatchGenerator()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const execute ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" flow(liveQueryStore.execute, applyLiveQueryPatchGenerator)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" same ",props:{style:{color:"#F8F8F2"}}},{content:"as",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"const execute0 ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" (",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"args) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" applyLiveQueryPatchGenerator(liveQueryStore.execute(",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"args))",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"On the client we now need to build an execution result out of the initial result and the patch\nresults, because our clients do not understand the graphql live query json patch protocol!"}),"\n",(0,n.jsx)(o.p,{children:"Applying the middleware is pretty easy as well!"}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { flow } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"fp-python/function",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { createApplyLiveQueryPatch } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/graphql-live-query-patch",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const applyLiveQueryPatch ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" createApplyLiveQueryPatch()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const execute ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" flow(networkInterface.execute, applyLiveQueryPatch)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" same ",props:{style:{color:"#F8F8F2"}}},{content:"as",props:{style:{color:"#FF79C6"}}}]},{tokens:[{content:"const execute0 ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" (",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"args) ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" applyLiveQueryPatch(networkInterface.execute(",props:{style:{color:"#F8F8F2"}}},{content:"...",props:{style:{color:"#BD93F9"}}},{content:"args))",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The library is optimized for network interfaces that return AsyncIterables. We can easily wrap out\nfavorite network interface (that uses observable style sinks) in an AsyncIterable with\n",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/push-pull-async-iterable-iterator",children:(0,n.jsx)(o.code,{children:"@n1ru4l/push-pull-async-iterable-iterator"})}),"!"]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsxs)(o.strong,{children:["Example with ",(0,n.jsx)(o.code,{children:"graphql-ws"})]})}),"\n",(0,n.jsx)(i.Code,{codeConfig:F,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { pipe } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"fp-python/function",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { makeAsyncIterableIteratorFromSink } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/push-pull-async-iterable-iterator",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { createApplyLiveQueryPatch } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"@n1ru4l/graphql-live-query-patch",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"import",props:{style:{color:"#FF79C6"}}},{content:" { createClient } ",props:{style:{color:"#F8F8F2"}}},{content:"from",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"graphql-ws/lib/use/ws",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const client ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" createClient({",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  url: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"ws://localhost:3000/graphql",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"})",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const applyLiveQueryPatch ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" createApplyLiveQueryPatch()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"const asyncIterator ",props:{style:{color:"#F8F8F2"}}},{content:"=",props:{style:{color:"#FF79C6"}}},{content:" pipe(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  makeAsyncIterableIteratorFromSink(",props:{style:{color:"#F8F8F2"}}},{content:"sink",props:{style:{color:"#FFB86C",fontStyle:"italic"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    const dispose = client.subscribe(",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        query: ",props:{style:{color:"#F8F8F2"}}},{content:"'",props:{style:{color:"#E9F284"}}},{content:"query @live { hello }",props:{style:{color:"#F1FA8C"}}},{content:"'",props:{style:{color:"#E9F284"}}}]},{tokens:[{content:"      },",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        ",props:{style:{color:"#F8F8F2"}}},{content:"next",props:{style:{color:"#8BE9FD"}}},{content:": sink.next,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        error: sink.error,",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"        complete: sink.complete",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"      }",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    )",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"    ",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:" () =",props:{style:{color:"#F8F8F2"}}},{content:">",props:{style:{color:"#FF79C6"}}},{content:" dispose()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  }),",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  applyLiveQueryPatch",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"//",props:{style:{color:"#FF79C6"}}},{content:" stop live query after ",props:{style:{color:"#F8F8F2"}}},{content:"5",props:{style:{color:"#BD93F9"}}},{content:" seconds.",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"setTimeout(() ",props:{style:{color:"#F8F8F2"}}},{content:"=>",props:{style:{color:"#FF79C6"}}},{content:" {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  asyncIterator.",props:{style:{color:"#F8F8F2"}}},{content:"return",props:{style:{color:"#FF79C6"}}},{content:"()",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}, ",props:{style:{color:"#F8F8F2"}}},{content:"5000",props:{style:{color:"#BD93F9"}}},{content:")",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"for",props:{style:{color:"#FF79C6"}}},{content:" ",props:{style:{color:"#F8F8F2"}}},{content:"await",props:{style:{color:"#FF79C6"}}},{content:" (const executionResult of asyncIterator) {",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"  console.log(executionResult)",props:{style:{color:"#F8F8F2"}}}]},{tokens:[{content:"}",props:{style:{color:"#F8F8F2"}}}]}],lang:"python"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["The whole package can be found\n",(0,n.jsxs)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/tree/main/packages/graphql-live-query-patch",children:[(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch"})," on GitHub"]}),".\nIt is also usable and feedback is highly appreciated. It currently has its flaws with list diffing,\nso further thoughts and ideas are highly appreciated."]}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.strong,{children:"Note:"})," We now seperated the ",(0,n.jsx)(o.code,{children:"json-patch"})," package into a separate\n",(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch-json-patch"})," package. ",(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch"})," now only\nincludes common logic shared between patch payload implementations. The reason for this is that\nthere are more efficient patch formats available, such as ",(0,n.jsx)(o.code,{children:"jsondiffpatch"}),", which generate smaller\npatches for list changes. The latter is now available as the separate package\n",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/tree/main/packages/graphql-live-query-patch-json-diff",children:(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch-jsondiffpatch"})}),"."]}),"\n",(0,n.jsx)(o.p,{children:"So let's take a look at this modular implementation approach regarding the aspects we used before."}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Automatically update the clients. ",(0,n.jsx)(o.strong,{children:"Yes."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"The approach of pushing the invalidation responsibility to the server might at first seem like a\ndrawback, but a smart abstraction (such as a ORM middleware), can result in pretty responsive\napplications."}),"\n",(0,n.jsxs)(o.ol,{start:"2",children:["\n",(0,n.jsxs)(o.li,{children:["Efficiently updates clients. ",(0,n.jsx)(o.strong,{children:"Yes."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"In case our execution result payloads are getting too big we can easily enable JSON patches by\nadding a middleware. Furthermore, the middleware is totally live query implementation independent!\nThat means if our projects requires a different implementation of the live query engine, the\nmiddleware can still be applied as long as the execution result is compatible with the live query\nexecution result format."}),"\n",(0,n.jsxs)(o.ol,{start:"3",children:["\n",(0,n.jsxs)(o.li,{children:["Flexibility. ",(0,n.jsx)(o.strong,{children:"High."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"Any database or third-party API can be used as long as we can somehow invalidate the resource (via\nsome PubSub system etc.). As all incorporated libraries are pretty pluggable only a few can be used\nand others be replaced by something that might make more sense for a specific project."}),"\n",(0,n.jsxs)(o.ol,{start:"4",children:["\n",(0,n.jsxs)(o.li,{children:["Adoptability. ",(0,n.jsx)(o.strong,{children:"High."})," ✅"]}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"This library can be added to any existing GraphQL.js schema without any hassle if you use transport\nthat allows full control over the schema creation and execution phase, such as graphql-helix or\ngraphql-ws which you are hopefully already using! Resource invalidation code can be added to the\nmutation resolvers over time gradually to reflect the needs of the frontend. The possibilities of\nresource invalidation are endless and the logic for those can be added incrementally. E.g. via an\nORM middleware, in our mutation code or maybe even on our GraphQL gateway."}),"\n",(0,n.jsx)(o.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,n.jsx)(o.p,{children:"Summed up this could be the start of a pluggable live query ecosystem that is flexible enough to be\ncompatible with a wide range of databases, graphql transports and schema builders instead of\nfocusing too much on a niche. In general, instead of having less flexible and bulky servers that try\nto be too opinionated and restrictive in their schema -> execution -> transport flow, GraphQL\ntooling should become more modular. At the same time this, however, should not imply that there is\nno need for opinionated framework-like approaches (as long as they give enough flexibility, e.g. by\nbeing composed out of modular packages)."}),"\n",(0,n.jsx)(o.p,{children:"I hope that more people will start exploring the possibilities of GraphQL live queries and also\nGraphQL in general! Eventually, we could even come up with an official live RFC for the spec!"}),"\n",(0,n.jsx)(o.p,{children:"There is a lot more to think about such as"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:"Partial query re-execution (e.g. by building ad-hoc queries that only select affected resources)"}),"\n",(0,n.jsx)(o.li,{children:"Mechanisms for batching similar query operations (e.g. for preventing execution of same operation\nmultiple times after invalidation)"}),"\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.del,{children:"Better list diffing/format for live query patches (as JSON patch performs rather poorly on list\ndiffs)"})," (Solved by introducing\n",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/tree/main/packages/graphql-live-query-patch-json-diff",children:(0,n.jsx)(o.code,{children:"@n1ru4l/graphql-live-query-patch-jsondiffpatch"})}),")"]}),"\n",(0,n.jsx)(o.li,{children:"What ever is bothering you while reading this article! \uD83D\uDE04"}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:"If you are a enthusiastic tinkerer and plan to build something with the libraries above, share it\nwith me and everyone else, so we can get more insights into different use-cases and requirements for\nall kind of applications!"}),"\n",(0,n.jsxs)(o.p,{children:["Let's continue the discussion on ",(0,n.jsx)(o.a,{href:"/discord",children:"Discord"}),", ",(0,n.jsx)(o.a,{href:"https://slack-invite.graphql.org",children:"Slack"})," or\non ",(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query/issues/14",children:"GitHub"})]}),"\n",(0,n.jsx)(o.p,{children:"Here are some more resource for you to thinker around with:"}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-live-query",children:"GraphQL Live Query libraries and example todo app that sync across all connected clients."})}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.a,{href:"https://github.com/n1ru4l/graphql-bleeding-edge-playground",children:"Experimental GraphQL Playground that implements RFC features (defer/stream) and live queries."})}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsxs)(o.a,{href:"https://dev.to/n1ru4l/collecting-graphql-live-query-resource-identifier-with-graphql-tools-5fm5",children:["More information on how the ",(0,n.jsx)(o.code,{children:"InMemoryLiveQueryStore"})," keeps track of resources."]})}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.a,{href:"https://dev.to/n1ru4l/graphql-live-queries-backed-by-the-relay-specification-3mlo",children:"Further thoughts on how the Relay Spec could help backing a live query system."})})]})}function h(e,o){throw Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}(0,r.j)({Content:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:o}=Object.assign({},(0,c.ah)(),e.components);return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)},nextraLayout:s.ZP,hot:e.hot,pageOpts:{filePath:"pages/blog/subscriptions-and-live-queries-real-time-with-graphql.mdx",route:"/blog/subscriptions-and-live-queries-real-time-with-graphql",frontMatter:{title:"Subscriptions and Live Queries - Real Time with GraphQL",authors:"laurin",tags:["graphql","subscription","real-time"],date:"2021-04-21T00:00:00.000Z",description:"GraphQL subscriptions are used by many. Live Query adoption, however, has not advanced that much. Let's take a look at both methods for achieving real-time communication with GraphQL.",image:"/blog-assets/subscriptions-and-live-queries-real-time-with-graphql/cover.png"},pageMap:[{kind:"MdxPage",name:"404",route:"/404"},{kind:"MdxPage",name:"500",route:"/500"},{kind:"Meta",data:{404:{type:"page",theme:{timestamp:!1,typesetting:"article"},title:"404"},500:{type:"page",theme:{timestamp:!1,typesetting:"article"},title:"500"},"about-us":{type:"page",theme:{typesetting:"article",timestamp:!1},title:"About Us"},blog:{type:"page",theme:{layout:"full",timestamp:!1},title:"Blog"},solutions:{type:"page",theme:{typesetting:"article",timestamp:!1},title:"Solutions"},"open-source":{type:"page",theme:{layout:"full",timestamp:!1}},logos:{type:"page",theme:{typesetting:"article",timestamp:!1},title:"Logos"},contact:{theme:{layout:"raw"}},services:{theme:{layout:"raw"},title:"Our Services"},index:{theme:{layout:"raw"},title:"GraphQL Tools"}}},{kind:"MdxPage",name:"about-us",route:"/about-us",frontMatter:{description:"Open Source developers with experience of working with the largest companies and applications. GraphQL consulting, workshops and trainings"}},{kind:"Folder",name:"blog",route:"/blog",children:[{kind:"Meta",data:{"*":{theme:{layout:"default",sidebar:!1,toc:!0,typesetting:"article",breadcrumb:!1}},"announcing-graphql-network-inspector":"Announcing GraphQL Network Inspector","graphql-cursor-pagination-with-postgresql":"GraphQL Cursor Pagination with PostgreSQL","graphql-hive-improvements-in-schema-registry":"GraphQL Hive - Improvements in Schema Registry","on-demand-shared-graphql-subscriptions-with-rxjs":"On-Demand Shared GraphQL Subscriptions with RxJS","scalable-apis-with-graphql-server-codegen-preset":"Scalable APIs with GraphQL Server Codegen Preset","build-realtime-graphql-backends-with-grafbase":"Build realtime GraphQL backends with Grafbase","graphql-eslint-3.14":"GraphQL-ESLint v3.14 - What's New?","graphqxl-language":"GraphQXL - The Missing GraphQL Language Extension?","graphql-yoga-nestjs-v9":"GraphQL Yoga NestJS integration now supports NestJS v9 and Yoga v3","graphql-yoga-v3":"Announcing GraphQL Yoga v3","announcing-free-single-sign-on-for-graphql-hive":"Announcing free SSO (Single Sign On) for GraphQL Hive","typescript-graphql-unions-types":"Getting the Best of TypeScript and GraphQL: Union Types","slack-bot-with-cloudflare":"Building Slack Bot with Cloudflare Workers","announcing-self-hosted-graphql-hive":"Announcing self-hosted GraphQL Hive","improved-security-with-graphql-armor-support-for-yoga-server-2":"Improved Security with GraphQL Armor support for Yoga Server 2","fetch-for-servers":"JavaScript runs everywhere, so should your servers - here is how","unleash-the-power-of-fragments-with-graphql-codegen":"Unleash the power of Fragments with GraphQL Codegen","houdini-and-kitql":"Bringing the best GraphQL experience to Svelte","building-graphql-servers-in-2022":"Building GraphQL Servers in 2022","announcing-graphql-hive-release":"Announcing GraphQL Hive, the complete GraphQL API manager","announcing-graphql-yoga-v2":"Announcing GraphQL Yoga 2.0!","graphql-error-handling-with-fp":"GraphQL error handling to the max","how-not-to-learn-graphql":"How not to learn GraphQL","the-anatomy-of-a-graphql-request":"The Anatomy of a GraphQL Request","caching-data-with-dataloader":"Caching data with DataLoader","graphql-authentication-with-envelop-and-auth0":"GraphQL Authentication with Envelop and Auth0","graphql-authz":"GraphQL AuthZ - GraphQL Authorization layer","graphql-code-generator-and-prisma":"GraphQL Code Generator with TypeScript and Prisma models","graphql-over-sse":"GraphQL over SSE (Server-Sent Events)","graphql-response-caching-with-envelop":"GraphQL Response Caching with Envelop","support-nodejs-esm":"What does it take to support Node.js ESM?","whats-new-in-graphql-codegen-v2":"What's new in GraphQL-Codegen v2?","swift-graphql":"SwiftGraphQL - A GraphQL client for Swift lovers.","graphql-tools-v8":"GraphQL Tools V8 - Stitch Federation Services","introducing-envelop":"Introducing Envelop - The GraphQL Plugin System","collecting-graphql-live-query-resource-identifier-with-graphql-tools":"Collecting GraphQL Live Query Resource Identifier with GraphQL Tools","graphql-with-typescript-done-right":"GraphQL with TypeScript done right","oss-contributor-workflow":"Easy Open Source - Orchestrating the Open Source Contribution Workflow","subscriptions-and-live-queries-real-time-with-graphql":"Subscriptions and Live Queries - Real Time with GraphQL","graphql-hive-preview":"GraphQL Hive - Manage Your GraphQL API Workflow","a-new-year-for-schema-stitching":"A New Year for GraphQL Schema Stitching","graphql-modules-v1":"The New GraphQL Modules","add-reactivity-to-an-existing-source":"Add reactivity to an existing source using GraphQL Mesh","graphql-deep-dive-6":"GraphQL - The Workflow","graphql-deep-dive-5":"GraphQL - The Stack -","graphql-deep-dive-4":"GraphQL - The Stack -","graphql-deep-dive-3":"GraphQL - The Stack -","graphql-deep-dive-2":"GraphQL - Use case and Architecture","graphql-deep-dive-1":"GraphQL - Diving Deep","graphql-codegen-and-apollo-client-3":"What's new with Apollo Client v3 and GraphQL Codegen","graphql-let":"graphql-let - A Webpack loader for GraphQL Code Generator","graphql-codegen-plugin-typescript-swr":"Introducing: GraphQL Codegen plugin for TypeScript & SWR!","graphql-tools-v7":"GraphQL Tools v7 delivers the next generation GraphQL API Gateway","joining-graphql-foundation":"The Guild is joining the GraphQL Foundation","whats-new-in-graphql-cli-4.1.0":"What's new in GraphQL CLI 4.1","graphql-mesh-subscriptions":"Webhooks as GraphQL Subscriptions using GraphQL Mesh","introducing-graphql-eslint":"Introducing GraphQL-ESLint!","graphql-over-websockets":"GraphQL over WebSockets","typed-document-node":"TypedDocumentNode: the next generation of GraphQL and TypeScript","migrating-from-rest":"Migrating from Schemaless REST API to GraphQL without writing any code","graphql-tools-v6":"GraphQL Tools - next generation schema stitching and new leadership","graphql-codegen-best-practices":"Integrating GraphQL Code Generator in your frontend applications","better-type-safety-for-resolvers-with-graphql-codegen":"Better Type Safety for your GraphQL resolvers with GraphQL Codegen","new-graphql-inspector":"New GraphQL Inspector and upcoming\xa0features","schema-change-notifications":"Schema Change Notifications in GraphQL Inspector","ci-ci-graphql-inspector":"Validate GraphQL Schema - Continuous Integration & Delivery\xa0Pipeline","multiple-environments-endpoints-graphql-inspector":"Multiple environments and endpoints in GraphQL Inspector","remote-control-graphql-inspector":"Enable Remote Control in GraphQL Inspector","graphql-mesh":"GraphQL Mesh - Query anything, run anywhere","react-e2e-tests-with-hooks":"How to run React E2E tests purely with hooks","graphql-cli-is-back":"GraphQL CLI is back!","graphql-config":"GraphQL Config - One configuration for all your tools","graphql-scalars":"GraphQL Scalars 1.0 is out!","coolest-underrated-design-pattern-in-react":"The coolest, most underrated design pattern in React","customizable-css-engine-in-javascript":"I wrote a customizable CSS engine in JavaScript","graphql-codegen-relay-compiler":"Optimizing Apollo Operations - GraphQL Code Generator & Relay Compiler","injectable-services-in-react":"Injectable services in React","graphql-codegen-java":"GraphQL Codegen adds new Apollo-Android and Java plugins","graphql-modules-auth":"Authentication and Authorization in GraphQL","taking-over-merge-graphql-schemas":"The Guild is taking over maintenance of merge-graphql-schemas","manage-circular-imports-hell-in-graphql-modules":"Manage Circular Imports Hell in GraphQL-Modules","how-should-you-pin-dependencies-and-why":"How should you pin dependencies and why?","graphql-stencil-apollo":"Stencil-Apollo - Stencil meets GraphQL","styled-components-encapsulation":"New encapsulation method for Styled-Components with Babel","graphql-codegen-hooks-support-react-apollo":"GraphQL Code Generator - Hooks support for React Apollo plugin","whatsapp-clone-apollo-angular-graphql-typescript-and-postgresql":"WhatsApp Clone - Angular, GraphQL, Apollo, TypeScript and PostgreSQL","whatsapp-clone-react-hooks-graphql-typescript-and-postgresql":"WhatsApp Clone - GraphQL, Apollo, TypeScript and PostgreSQL",sofa:"SOFA — The best way to REST (is GraphQL)","magical-babel-plugin-for-react-performance-boost":"Babel plugin and get a performance boost for your React components","introducing-graphql-inspector":"Introducing: GraphQL Inspector","dependency-injection-library-in-graphql-modules":"Dependency Injection in GraphQL-Modules","graphql-modules-scoped-providers":"Scoped Providers in GraphQL-Modules","modular-encapsulation-graphql-modules":"Modular Encapsulation in Large-Scale GraphQL Projects","how-brain-detects-shapes":"This is how our brain detects shapes","graphql-typescript-modules-codegen":"GraphQL TypeScript - w/ GraphQL-Modules and GraphQL-Code-Generator","improved-angular-console":"How I helped improve Angular Console","react-hooks-system":"Under the hood of React's hooks system","accountsjs-graphql-modules":"Authentication with accounts-js & GraphQL Modules","runtime-jsx":"Implementing a runtime version of JSX","graphql-modules":"GraphQL Modules  —  Feature based GraphQL Modules at scale","recursive-react-tree-component-implementation-made-easy":"Recursive React tree component implementation made easy","react-dom-event-handling-system":"Getting to know React DOM's event handling system inside out","how-i-build-babel-plugins":"This is how I build Babel plug-ins","nodes-child-process":"Getting to know Node's child_process module","react-app-out-of-a-webflow":"How to create a React app out of a Webflow project","git-rebase-not-interactive":"git rebase (not) --interactive","apollo-angular-12":"Apollo-Angular 1.2 - using GraphQL in your apps just got a lot easier!","codegen-typescript-react-apollo":"GraphQL Code Generator for Typescript React Apollo","graphql-code-generator-011":"GraphQL Code Generator v0.11","angular-cli-meteor-no-eject":"Angular CLI + Meteor — No more ejecting Webpack Configuration","connecting-react-native-and-meteor":"React Native and Meteor backend w/o any 3rd party library in 2018","meteor-with-webpack-in-2018":"Meteor with Webpack — Faster compilation and better source handling","whats-new-on-meteor-client-bundler":"Meteor Client Bundler — React Native support, handling Meteor imports","graphql-code-generator-090":"What's new in GraphQL Codegen 0.9.0","graphql-geo-strike":"Open source FPS with Apollo GraphQL — GeoStrike (Alpha)","graphql-code-generator":"Introducing GraphQL Code Generator","create-native-addon-using-c":"How to create a native add-on using C++","apollo-angular-011":"Apollo Angular Version 0.11","whatsapp-clone-with-ionic-angular-and-meteor":"Build a WhatsApp Clone with Ionic 2, Angular 2, and Meteor","graphql-as-a-best-practice-for-modern-angular-apps":"GraphQL as a best practice for modern Angular apps?","whatsapp-clone-with-meteor-and-ionic":"Build a WhatsApp clone with Meteor and Ionic — Meteor Platform version"}},{kind:"MdxPage",name:"a-new-year-for-schema-stitching",route:"/blog/a-new-year-for-schema-stitching",frontMatter:{title:"A New Year for GraphQL Schema Stitching",description:"2021 is the year to give Schema Stitching a fresh look after its recent renovation",date:"2021-01-14T00:00:00.000Z",authors:"gmac",tags:["graphql","graphql-tools","schema-stitching"],image:"https://user-images.githubusercontent.com/727224/104328926-56b0a700-54ba-11eb-9ad3-f6d2b971d55d.jpg",thumbnail:"https://user-images.githubusercontent.com/727224/104328777-29fc8f80-54ba-11eb-87d0-9982af1d8281.jpg"}},{kind:"MdxPage",name:"accountsjs-graphql-modules",route:"/blog/accountsjs-graphql-modules",frontMatter:{title:"Authentication with accounts-js & GraphQL Modules",description:"How to implement server-side using accounts-js, GraphQL-Modules and Apollo-Server",date:"2018-11-16T00:00:00.000Z",authors:"arda",tags:["graphql","graphql-modules","authentication"],image:"/medium/39e75508d22dbe737fad027dd23819b8.png"}},{kind:"MdxPage",name:"add-reactivity-to-an-existing-source",route:"/blog/add-reactivity-to-an-existing-source",frontMatter:{title:"Add reactivity to an existing source using GraphQL Mesh",authors:"jycouet",tags:["graphql","graphql-mesh","subscription"],date:"2020-12-15T00:00:00.000Z",description:"How To extend an existing endpoint with subscriptions to bring reactivity to your application.",image:"/blog-assets/add-reactivity-to-an-existing-source/PimpMyGraphQL.jpg"}},{kind:"MdxPage",name:"angular-cli-meteor-no-eject",route:"/blog/angular-cli-meteor-no-eject",frontMatter:{title:"Angular CLI + Meteor — No more ejecting Webpack Configuration",tags:["angular-meteor"],authors:"arda",date:"2018-07-13T00:00:00.000Z",description:"Angular CLI + Meteor — No more ejecting Webpack Configuration",image:"/blog-assets/angular-cli-meteor-no-eject/cover.png"}},{kind:"MdxPage",name:"announcing-free-single-sign-on-for-graphql-hive",route:"/blog/announcing-free-single-sign-on-for-graphql-hive",frontMatter:{title:"Announcing free SSO (Single Sign On) for GraphQL Hive",tags:["graphql","graphql-hive"],authors:"laurin",date:"2022-11-07T00:00:00.000Z",description:"Link your GraphQL Hive Organization to your OAuth OIDC provider of choice.",image:"/blog-assets/announcing-free-single-sign-on-for-graphql-hive/cover.png",thumbnail:"/blog-assets/announcing-free-single-sign-on-for-graphql-hive/thumbnail.png"}},{kind:"MdxPage",name:"announcing-graphql-hive-release",route:"/blog/announcing-graphql-hive-release",frontMatter:{title:"Announcing GraphQL Hive, the complete GraphQL API manager",tags:["graphql","graphql-hive"],authors:["charlypoly","arda","laurin","saihaj","kamil","dotan","uri","dimitri"],date:"2022-05-24T00:00:00.000Z",description:"We are incredibly excited to share with you today the public launch of GraphQL Hive!",image:"/blog-assets/announcing-graphql-hive/cover.png",thumbnail:"/blog-assets/announcing-graphql-hive/thumbnail.png"}},{kind:"MdxPage",name:"announcing-graphql-network-inspector",route:"/blog/announcing-graphql-network-inspector",frontMatter:{title:"Announcing GraphQL Network Inspector",tags:["graphql","graphql-network-inspector"],authors:["warrenjday"],date:"2023-02-22T00:00:00.000Z",description:"A better way to debug network traffic with GraphQL",image:"/blog-assets/announcing-graphql-network-inspector/cover.png",thumbnail:"/blog-assets/announcing-graphql-network-inspector/thumbnail.png"}},{kind:"MdxPage",name:"announcing-graphql-yoga-v2",route:"/blog/announcing-graphql-yoga-v2",frontMatter:{title:"Announcing GraphQL Yoga 2.0!",tags:["server","envelop","node","graphql"],authors:["charlypoly","arda","laurin","saihaj"],date:"2022-03-29T00:00:00.000Z",description:"Fully-featured GraphQL Server with focus on easy setup, performance and great developer experience",image:"/blog-assets/announcing-graphql-yoga-2/cover.png",thumbnail:"/blog-assets/announcing-graphql-yoga-2/thumbnail.png"}},{kind:"MdxPage",name:"announcing-self-hosted-graphql-hive",route:"/blog/announcing-self-hosted-graphql-hive",frontMatter:{title:"Announcing self-hosted GraphQL Hive",tags:["graphql","graphql-hive"],authors:["laurin"],date:"2022-10-05T00:00:00.000Z",description:"Host your own GraphQL Hive instance.",image:"/blog-assets/announcing-self-hosted-graphql-hive/cover.png",thumbnail:"/blog-assets/announcing-self-hosted-graphql-hive/thumbnail.png"}},{kind:"MdxPage",name:"apollo-angular-011",route:"/blog/apollo-angular-011",frontMatter:{title:"Apollo Angular Version 0.11",authors:"kamil",tags:["graphql","apollo-angular"],date:"2017-03-01T00:00:00.000Z",description:"New name, AoT support, TypeScript improvements, and Angular 4 readiness",image:"/medium/cc2b3a84ee2ef485ffad79881a284b9a.png"}},{kind:"MdxPage",name:"apollo-angular-12",route:"/blog/apollo-angular-12",frontMatter:{title:"Apollo-Angular 1.2 - using GraphQL in your apps just got a lot easier!",tags:["graphql","angular","apollo-angular"],authors:"kamil",date:"2018-08-21T00:00:00.000Z",description:"Check what's new in Apollo Angular and how to get the full potential benefits of using Angular + GraphQL + TypeScript combined thanks to GraphQL-Code-Generator",image:"/medium/351c722f184845c0b6f792f4da534e96.png"}},{kind:"MdxPage",name:"better-type-safety-for-resolvers-with-graphql-codegen",route:"/blog/better-type-safety-for-resolvers-with-graphql-codegen",frontMatter:{title:"Better Type Safety for your GraphQL resolvers with GraphQL Codegen",tags:["graphql","codegen","node","typescript"],authors:"dotan",date:"2020-05-17T00:00:00.000Z",description:"Type-check your resolvers' implementation in order to find issues in build-time. Simply integrate with your existing TypeScript data models and context types.",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"build-realtime-graphql-backends-with-grafbase",route:"/blog/build-realtime-graphql-backends-with-grafbase",frontMatter:{title:"Build realtime GraphQL backends with Grafbase",description:"Build collaborative, multiplayer apps faster and easier than ever with GraphQL Live Queries using Grafbase.",authors:"notrab",tags:["graphql","real-time","live-query"],date:"2023-01-17T00:00:00.000Z",image:"/blog-assets/build-realtime-graphql-backends-with-grafbase/cover.png",thumbnail:"/blog-assets/build-realtime-graphql-backends-with-grafbase/cover.png"}},{kind:"MdxPage",name:"building-graphql-servers-in-2022",route:"/blog/building-graphql-servers-in-2022",frontMatter:{title:"Building GraphQL Servers in 2022",authors:"notrab",tags:["graphql","conference","yoga"],date:"2022-06-28T00:00:00.000Z",description:"In this talk we'll learn about the tools needed to build your own GraphQL server from scratch using GraphQL Yoga.",image:"/blog-assets/building-graphql-servers-in-2022/building-graphql-servers-in-2022.png",thumbnail:"/blog-assets/building-graphql-servers-in-2022/building-graphql-servers-in-2022-thumbnail.png"}},{kind:"MdxPage",name:"caching-data-with-dataloader",route:"/blog/caching-data-with-dataloader",frontMatter:{title:"Caching data with DataLoader",authors:"giladtidhar",tags:["cache","data","server","graphql"],date:"2022-01-26T00:00:00.000Z",description:"How to use DataLoader to cache data",image:"/blog-assets/caching-data-with-dataloader/cover.png"}},{kind:"MdxPage",name:"ci-ci-graphql-inspector",route:"/blog/ci-ci-graphql-inspector",frontMatter:{title:"Validate GraphQL Schema - Continuous Integration & Delivery\xa0Pipeline",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2020-05-03T00:00:00.000Z",description:"Detect breaking changes and identify possible issues in GraphQL API with GraphQL Inspector",image:"/blog-assets/ci-ci-graphql-inspector/cover.png"}},{kind:"MdxPage",name:"codegen-typescript-react-apollo",route:"/blog/codegen-typescript-react-apollo",frontMatter:{title:"GraphQL Code Generator for Typescript React Apollo",authors:"arda",tags:["graphql","codegen","react","react-apollo","hooks"],date:"2018-08-21T00:00:00.000Z",updateDate:"2020-05-20T00:00:00.000Z",description:"Generate React Apollo Query, Mutation and Subscription components and hook. All completely typed by TypeScript.",image:"/medium/897186a7e3bfe61428b91f7f82c5b922.png"}},{kind:"MdxPage",name:"collecting-graphql-live-query-resource-identifier-with-graphql-tools",route:"/blog/collecting-graphql-live-query-resource-identifier-with-graphql-tools",frontMatter:{title:"Collecting GraphQL Live Query Resource Identifier with GraphQL Tools",tags:["graphql","graphql-tools","real-time","live-query"],authors:"laurin",date:"2021-07-01T00:00:00.000Z",description:"GraphQL Tools can help to solve a variety of problems. Lean how it can be used for live queries.",image:"/blog-assets/collecting-graphql-live-query-resource-identifier-with-graphql-tools/cover.jpg"}},{kind:"MdxPage",name:"connecting-react-native-and-meteor",route:"/blog/connecting-react-native-and-meteor",frontMatter:{title:"React Native and Meteor backend w/o any 3rd party library in 2018",tags:["react-native","meteor"],authors:"arda",date:"2018-07-13T00:00:00.000Z",description:"Introduction to new features of client bundler and React Native Meteor Polyfills including OAuth and persistent login session support etc.",image:"/blog-assets/connecting-react-native-and-meteor/cover.png"}},{kind:"MdxPage",name:"coolest-underrated-design-pattern-in-react",route:"/blog/coolest-underrated-design-pattern-in-react",frontMatter:{title:"The coolest, most underrated design pattern in React",authors:"eytan",tags:["react","child-props"],date:"2019-07-31T00:00:00.000Z",description:"The coolest, most underrated design pattern in React",image:"/medium/8da637649866c3f3ebcc4e5c90437d89.png"}},{kind:"MdxPage",name:"create-native-addon-using-c",route:"/blog/create-native-addon-using-c",frontMatter:{title:"How to create a native add-on using C++",authors:"eytan",tags:["cpp"],date:"2017-05-08T00:00:00.000Z",description:"Node.js Advanced — How to create a native add-on using C++",image:"/medium/6989c5ee48f37336c330100619adbe13.png"}},{kind:"MdxPage",name:"customizable-css-engine-in-javascript",route:"/blog/customizable-css-engine-in-javascript",frontMatter:{title:"I wrote a customizable CSS engine in JavaScript",authors:"eytan",tags:["css","javascript"],date:"2019-07-24T00:00:00.000Z",description:"I wrote a customizable CSS engine in JavaScript. Custom selectors, custom rules and custom events. You determine its behavior.",image:"/medium/9ecd4800956fc386f893c8730a0beb63.jpeg"}},{kind:"MdxPage",name:"dependency-injection-library-in-graphql-modules",route:"/blog/dependency-injection-library-in-graphql-modules",frontMatter:{title:"Dependency Injection in GraphQL-Modules",authors:"arda",tags:["di","graphql","graphql-modules"],date:"2019-01-11T00:00:00.000Z",description:"Why did we implement our own Dependency Injection library for GraphQL-Modules?",image:"/medium/783e92a762ee3c5b1580336b00f76d46.png"}},{kind:"MdxPage",name:"fetch-for-servers",route:"/blog/fetch-for-servers",frontMatter:{title:"JavaScript runs everywhere, so should your servers - here is how",tags:["fetch","whatwg","node","graphql","graphql-yoga"],authors:"arda",date:"2022-08-22T00:00:00.000Z",description:"A new way to make any Javascript server platform-agnostic.",image:"/blog-assets/fetch-for-servers/cover.png",thumbnail:"/blog-assets/fetch-for-servers/thumbnail.png"}},{kind:"MdxPage",name:"git-rebase-not-interactive",route:"/blog/git-rebase-not-interactive",frontMatter:{title:"git rebase (not) --interactive",authors:"eytan",tags:["git"],date:"2018-09-03T00:00:00.000Z",description:"How to build a Node.js script to re-write history. Pre-requisites: Familiarity with git rebase --interactive.",image:"/medium/aaf7b6a36c30ab802f51d8ecb40478e9.png"}},{kind:"MdxPage",name:"graphql-as-a-best-practice-for-modern-angular-apps",route:"/blog/graphql-as-a-best-practice-for-modern-angular-apps",frontMatter:{title:"GraphQL as a best practice for modern Angular apps?",authors:"uri",tags:["graphql","angular"],date:"2016-07-28T00:00:00.000Z",description:"In this post, I'll make the case for why Angular needs a best practice for communicating with the server, and why GraphQL should be that best practice.",image:"/medium/723af25d23534dd3f801257126be159b.png"}},{kind:"MdxPage",name:"graphql-authentication-with-envelop-and-auth0",route:"/blog/graphql-authentication-with-envelop-and-auth0",frontMatter:{title:"GraphQL Authentication with Envelop and Auth0",authors:"laurin",tags:["graphql","authentication","envelop"],date:"2021-12-19T00:00:00.000Z",description:"Learn how to quickly add authentication to you GraphQL Envelop setup with Auth0.",image:"/blog-assets/graphql-authentication-with-envelop-and-auth0/cover.jpg"}},{kind:"MdxPage",name:"graphql-authz",route:"/blog/graphql-authz",frontMatter:{title:"GraphQL AuthZ - GraphQL Authorization layer",authors:["dimatill","laurin"],tags:["graphql","authorization","graphql-authz"],date:"2021-12-19T00:00:00.000Z",description:"Flexible modern way of adding an authorization layer on top of your existing GraphQL backend systems.",image:"/blog-assets/graphql-authz/cover.jpg"}},{kind:"MdxPage",name:"graphql-cli-is-back",route:"/blog/graphql-cli-is-back",frontMatter:{title:"GraphQL CLI is back!",authors:"uri",tags:["graphql","graphql-cli"],date:"2019-10-31T00:00:00.000Z",description:"Your Swiss Army Knife for the GraphQL ecosystem. Production-ready GraphQL app in seconds.",image:"/medium/23b46179aaf5f6f3422b0ab82db7ed80.jpg"}},{kind:"MdxPage",name:"graphql-code-generator-011",route:"/blog/graphql-code-generator-011",frontMatter:{title:"GraphQL Code Generator v0.11",authors:"dotan",tags:["graphql","codegen"],date:"2018-08-21T00:00:00.000Z",description:"Generate React and Angular Apollo Components, Resolver signatures and much more!",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"graphql-code-generator-090",route:"/blog/graphql-code-generator-090",frontMatter:{title:"What's new in GraphQL Codegen 0.9.0",authors:"dotan",tags:["graphql","codegen"],date:"2018-05-07T00:00:00.000Z",description:"The GraphQL codegen library can generate any code for any language — including type definitions, data models, query builder, resolvers, ORM code, complete full stack platforms!! and any specific code for your needs.",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"graphql-code-generator-and-prisma",route:"/blog/graphql-code-generator-and-prisma",frontMatter:{title:"GraphQL Code Generator with TypeScript and Prisma models",authors:"giladtidhar",tags:["graphql","typescript","codegen","prisma"],date:"2021-12-19T00:00:00.000Z",description:"How to use Prisma models with GraphQL Code Generator",image:"/blog-assets/prisma-codegen/prismacodegen.png"}},{kind:"MdxPage",name:"graphql-code-generator",route:"/blog/graphql-code-generator",frontMatter:{title:"Introducing GraphQL Code Generator",authors:"dotan",tags:["graphql","codegen"],date:"2017-10-12T00:00:00.000Z",description:"The True GraphQL-First platform.",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"graphql-codegen-and-apollo-client-3",route:"/blog/graphql-codegen-and-apollo-client-3",frontMatter:{title:"What's new with Apollo Client v3 and GraphQL Codegen",authors:"dotan",tags:["graphql","codegen","typescript","react","angular","apollo-client"],date:"2020-11-30T00:00:00.000Z",description:"All the new features GraphQL Codegen adds to your type-system with the new Apollo Client 3.",image:"/blog-assets/graphql-code-generator/codegen-ac3.png"}},{kind:"MdxPage",name:"graphql-codegen-best-practices",route:"/blog/graphql-codegen-best-practices",frontMatter:{title:"Integrating GraphQL Code Generator in your frontend applications",authors:"dotan",tags:["graphql","codegen","typescript","react","angular"],date:"2020-05-20T00:00:00.000Z",description:"The GraphQL codegen library can generate code for multiple purposes. Make sure you get the most out of it.",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"graphql-codegen-hooks-support-react-apollo",route:"/blog/graphql-codegen-hooks-support-react-apollo",frontMatter:{title:"GraphQL Code Generator - Hooks support for React Apollo plugin",authors:"leonardo",tags:["graphql","codegen","react","react-apollo","hooks"],date:"2019-03-01T00:00:00.000Z",updateDate:"2020-05-20T00:00:00.000Z",description:"Use and generate React Hooks with Apollo and Typescript with the new version of GraphQL Code Generator.",image:"/blog-assets/graphql-codegen-hooks-support-react-apollo/cover.png"}},{kind:"MdxPage",name:"graphql-codegen-java",route:"/blog/graphql-codegen-java",frontMatter:{title:"GraphQL Codegen adds new Apollo-Android and Java plugins",authors:"dotan",tags:["graphql","codegen","apollo-android","android","java"],date:"2019-06-19T00:00:00.000Z",updateDate:"2020-05-20T00:00:00.000Z",description:"GraphQL Codegen adds a new Apollo-Android and a new Java Backend plugins!",image:"/blog-assets/graphql-codegen-java/cover.png"}},{kind:"MdxPage",name:"graphql-codegen-plugin-typescript-swr",route:"/blog/graphql-codegen-plugin-typescript-swr",frontMatter:{title:"Introducing: GraphQL Codegen plugin for TypeScript & SWR!",authors:"croutonn",tags:["graphql","codegen","typescript","react","hooks","swr"],date:"2020-11-23T00:00:00.000Z",description:"Working with GraphQL, TypeScript and SWR is now much simpler!",image:"/blog-assets/graphql-codegen-plugin-typescript-swr/codegen-swr.png"}},{kind:"MdxPage",name:"graphql-codegen-relay-compiler",route:"/blog/graphql-codegen-relay-compiler",frontMatter:{title:"Optimizing Apollo Operations - GraphQL Code Generator & Relay Compiler",authors:"laurin",tags:["graphql","codegen","relay"],date:"2019-07-15T00:00:00.000Z",description:"Optimizing your Apollo Operations with GraphQL Code Generator and the Relay Compiler.",image:"/blog-assets/graphql-codegen-relay-compiler/cover.png"}},{kind:"MdxPage",name:"graphql-config",route:"/blog/graphql-config",frontMatter:{title:"GraphQL Config - One configuration for all your tools",authors:"kamil",tags:["graphql","graphql-config"],date:"2019-10-25T00:00:00.000Z",description:"One configuration for all your tools.",image:"/medium/6acdca885a85960c4b5f3b5c2516a7be.jpg"}},{kind:"MdxPage",name:"graphql-cursor-pagination-with-postgresql",route:"/blog/graphql-cursor-pagination-with-postgresql",frontMatter:{title:"GraphQL Cursor Pagination with PostgreSQL",authors:"laurin",tags:["graphql","python","postgresql"],date:"2023-02-15T00:00:00.000Z",description:"An python based approach for understanding and implementing GraphQL Cursor Pagination.",image:"/blog-assets/graphql-cursor-pagination-with-postgresql/cover.png",thumbnail:"/blog-assets/graphql-cursor-pagination-with-postgresql/thumbnail.png"}},{kind:"MdxPage",name:"graphql-deep-dive-1",route:"/blog/graphql-deep-dive-1",frontMatter:{title:"GraphQL - Diving Deep",authors:"tvvignesh",tags:["graphql","deepdive","faq"],date:"2020-12-01T00:00:00.000Z",description:"Answering all the questions you may have about GraphQL and its ecosystem.",image:"/blog-assets/graphql-deep-dive-1/cover.png",thumbnail:"/blog-assets/graphql-deep-dive-1/cover.png"}},{kind:"MdxPage",name:"graphql-deep-dive-2",route:"/blog/graphql-deep-dive-2",frontMatter:{title:"GraphQL - Use case and Architecture",authors:"tvvignesh",tags:["graphql","deepdive","architecture"],date:"2020-12-02T00:00:00.000Z",description:"Architecting for GraphQL and its ecosystem.",image:"/blog-assets/graphql-deep-dive-2/cover.png",thumbnail:"/blog-assets/graphql-deep-dive-2/cover.png"}},{kind:"MdxPage",name:"graphql-deep-dive-3",route:"/blog/graphql-deep-dive-3",frontMatter:{title:"GraphQL - The Stack -",authors:"tvvignesh",tags:["graphql","deepdive","techstack"],date:"2020-12-03T00:00:00.000Z",description:"The GraphQL Stack - Part 1.",image:"/blog-assets/graphql-deep-dive-3/cover.png,",thumbnail:"/blog-assets/graphql-deep-dive-3/cover.png"}},{kind:"MdxPage",name:"graphql-deep-dive-4",route:"/blog/graphql-deep-dive-4",frontMatter:{title:"GraphQL - The Stack -",authors:"tvvignesh",tags:["graphql","deepdive","techstack"],date:"2020-12-04T00:00:00.000Z",description:"The GraphQL Stack - Part 2.",image:"/blog-assets/graphql-deep-dive-4/cover.png",thumbnail:"/blog-assets/graphql-deep-dive-4/cover.png"}},{kind:"MdxPage",name:"graphql-deep-dive-5",route:"/blog/graphql-deep-dive-5",frontMatter:{title:"GraphQL - The Stack -",authors:"tvvignesh",tags:["graphql","deepdive","techstack"],date:"2020-12-06T00:00:00.000Z",description:"The GraphQL Stack - Part 3.",image:"/blog-assets/graphql-deep-dive-5/cover.png",thumbnail:"/blog-assets/graphql-deep-dive-5/cover.png"}},{kind:"MdxPage",name:"graphql-deep-dive-6",route:"/blog/graphql-deep-dive-6",frontMatter:{title:"GraphQL - The Workflow",authors:"tvvignesh",tags:["graphql","deepdive","workflow"],date:"2020-12-12T00:00:00.000Z",description:"The Workflow when taking GraphQL from development to production.",image:"/blog-assets/graphql-deep-dive-6/cover.png",thumbnail:"/blog-assets/graphql-deep-dive-6/cover.png"}},{kind:"MdxPage",name:"graphql-error-handling-with-fp",route:"/blog/graphql-error-handling-with-fp",frontMatter:{title:"GraphQL error handling to the max",authors:"gthau",tags:["graphql","typescript","codegen","fp-python","error-handling","best-practices"],date:"2022-03-07T00:00:00.000Z",description:"Handle unsafe APIs in a typesafe way with Typescript and Functional Programming.",image:"/blog-assets/graphql-error-handling-with-fp/graphql-error-1024x512.png",thumbnail:"/blog-assets/graphql-error-handling-with-fp/graphql-error-1024x512.png"}},{kind:"MdxPage",name:"graphql-eslint-3.14",route:"/blog/graphql-eslint-3.14",frontMatter:{title:"GraphQL-ESLint v3.14 - What's New?",tags:["graphql","eslint","linter"],authors:"dimitri",date:"2022-12-28T00:00:00.000Z",description:"The best GraphQL linter becomes even better! Check out what we added in the new version.",image:"/blog-assets/graphql-eslint-3.14/image.png",thumbnail:"/blog-assets/graphql-eslint-3.14/thumbnail.png"}},{kind:"MdxPage",name:"graphql-geo-strike",route:"/blog/graphql-geo-strike",frontMatter:{title:"Open source FPS with Apollo GraphQL — GeoStrike (Alpha)",authors:"david",tags:["cesium","graphql","angular"],date:"2018-02-15T00:00:00.000Z",description:"A GeoReferenced Multiplayer First-Person Shooter Game.",image:"/blog-assets/graphql-geo-strike/cover.png"}},{kind:"MdxPage",name:"graphql-hive-improvements-in-schema-registry",route:"/blog/graphql-hive-improvements-in-schema-registry",frontMatter:{title:"GraphQL Hive - Improvements in Schema Registry",authors:"kamil",tags:["graphql","graphql-hive"],date:"2023-02-06T00:00:00.000Z",description:"GraphQL Hive announces new and improved schema registry model with improved workflow and user experience. Access to old model will end soon, switch recommended. New model has improved defaults and the ability to delete a schema.",image:"/blog-assets/graphql-hive/improvements-in-schema-registry/cover.png",thumbnail:"/blog-assets/graphql-hive/improvements-in-schema-registry/thumbnail.png"}},{kind:"MdxPage",name:"graphql-hive-preview",route:"/blog/graphql-hive-preview",frontMatter:{title:"GraphQL Hive - Manage Your GraphQL API Workflow",authors:"kamil",tags:["graphql","graphql-hive"],date:"2021-03-26T00:00:00.000Z",description:"Announcing the beta testing program of GraphQL Hive - schema registry for any GraphQL workflow.",image:"/blog-assets/graphql-hive/cover.png"}},{kind:"MdxPage",name:"graphql-let",route:"/blog/graphql-let",frontMatter:{title:"graphql-let - A Webpack loader for GraphQL Code Generator",authors:"soichi",tags:["graphql","codegen","webpack"],date:"2020-11-25T00:00:00.000Z",description:"graphql-let is a webpack loader of GraphQL code generator.",image:"/blog-assets/graphql-let/cover.png",thumbnail:"/blog-assets/graphql-let/cover.png"}},{kind:"MdxPage",name:"graphql-mesh-subscriptions",route:"/blog/graphql-mesh-subscriptions",frontMatter:{title:"Webhooks as GraphQL Subscriptions using GraphQL Mesh",authors:"arda",tags:["subscriptions","webhooks","graphql","mesh"],date:"2020-10-05T00:00:00.000Z",description:"Consume your legacy webhooks and subscriptions from any data source as GraphQL Subscriptions with GraphQL Mesh.",image:"/blog-assets/graphql-mesh-subscriptions/cover.png"}},{kind:"MdxPage",name:"graphql-mesh",route:"/blog/graphql-mesh",frontMatter:{title:"GraphQL Mesh - Query anything, run anywhere",authors:"uri",tags:["graphql","graphql-mesh"],date:"2020-03-23T00:00:00.000Z",description:"We are excited to announce GraphQL Mesh.",image:"/blog-assets/graphql-mesh/cover.webm",thumbnail:"/blog-assets/graphql-mesh/cover.jpg"}},{kind:"MdxPage",name:"graphql-modules-auth",route:"/blog/graphql-modules-auth",frontMatter:{title:"Authentication and Authorization in GraphQL",authors:"dotan",tags:["graphql","graphql-modules","authentication"],date:"2019-06-19T00:00:00.000Z",description:"After a few years of working with GraphQL, as open-source developers and as infrastructure team in large enterprises, we've learned some lessons about GraphQL, and how to authenticate and authorize GraphQL API.",image:"/blog-assets/graphql-modules-auth/cover.jpeg"}},{kind:"MdxPage",name:"graphql-modules-scoped-providers",route:"/blog/graphql-modules-scoped-providers",frontMatter:{title:"Scoped Providers in GraphQL-Modules",authors:"arda",tags:["graphql","graphql-modules","di"],date:"2019-01-11T00:00:00.000Z",description:"Understand how scoped providers work in GraphQL-Modules Dependency Injection.",image:"/medium/330126a7ddd518886b068e1f1e23ee41.png"}},{kind:"MdxPage",name:"graphql-modules-v1",route:"/blog/graphql-modules-v1",frontMatter:{title:"The New GraphQL Modules",authors:"kamil",tags:["graphql","graphql-modules"],date:"2020-12-21T00:00:00.000Z",description:"GraphQL Modules showed up on NPM almost 3 years ago, but now we decided to rewrite it from scratch.",image:"/blog-assets/graphql-modules-v1/cover.png"}},{kind:"MdxPage",name:"graphql-modules",route:"/blog/graphql-modules",frontMatter:{title:"GraphQL Modules  —  Feature based GraphQL Modules at scale",authors:"uri",tags:["graphql","graphql-modules"],date:"2018-11-05T00:00:00.000Z",description:"Feature based GraphQL Modules at scale.",image:"/medium/a4a2c4f56993a801a7ffe394fc0f95f1.png"}},{kind:"MdxPage",name:"graphql-over-sse",route:"/blog/graphql-over-sse",frontMatter:{title:"GraphQL over SSE (Server-Sent Events)",tags:["graphql","graphql-subscriptions"],authors:"enisdenjo",date:"2021-09-01T00:00:00.000Z",description:"Zero-dependency, HTTP/1 safe, simple, GraphQL over Server-Sent Events Protocol server and client.",image:"/blog-assets/graphql-over-sse/graphql-over-sse.jpg"}},{kind:"MdxPage",name:"graphql-over-websockets",route:"/blog/graphql-over-websockets",frontMatter:{title:"GraphQL over WebSockets",tags:["graphql","graphql-subscriptions"],authors:"enisdenjo",date:"2020-09-15T00:00:00.000Z",description:"Coherent, zero-dependency, lazy, simple, server and client implementation of the new, security first, GraphQL over WebSocket Protocol.",image:"/blog-assets/graphql-over-websockets/graphql-over-websocket.png"}},{kind:"MdxPage",name:"graphql-response-caching-with-envelop",route:"/blog/graphql-response-caching-with-envelop",frontMatter:{title:"GraphQL Response Caching with Envelop",tags:["graphql"],authors:"laurin",date:"2021-08-19T00:00:00.000Z",description:"Caching GraphQL endpoints can be tricky. Let's take a look at the theory behind making it possible and learn how to do it with Envelop.",image:"/blog-assets/graphql-response-caching-with-envelop/graphql-response-caching-with-envelop-cover.png",canonical:"https://envelop.dev/docs/guides/adding-a-graphql-response-cache"}},{kind:"MdxPage",name:"graphql-scalars",route:"/blog/graphql-scalars",frontMatter:{title:"GraphQL Scalars 1.0 is out!",authors:"arda",tags:["graphql","graphql-scalars"],date:"2019-08-08T00:00:00.000Z",description:"More Types, Data Integrity and Strict Validations on GraphQL.",image:"/medium/037668856e53c2b8a6e50ca7b886d157.jpg"}},{kind:"MdxPage",name:"graphql-stencil-apollo",route:"/blog/graphql-stencil-apollo",frontMatter:{title:"Stencil-Apollo - Stencil meets GraphQL",authors:"arda",tags:["graphql","stencil","stencil-apollo"],date:"2019-03-06T00:00:00.000Z",description:"Stencil-Apollo lets you easily use GraphQL in Web Components.",image:"/medium/de2fef916d1624b5a70599ef50687bf6.png"}},{kind:"MdxPage",name:"graphql-tools-v6",route:"/blog/graphql-tools-v6",frontMatter:{title:"GraphQL Tools - next generation schema stitching and new leadership",authors:"arda",tags:["graphql","graphql-tools","schema-first","schema-stitching"],date:"2020-05-21T00:00:00.000Z",description:"GraphQL Tools v6 with more tools, improved schema stitching and bug fixes.",image:"/blog-assets/graphql-tools-v6/cover.webm",thumbnail:"/blog-assets/graphql-tools-v6/cover.png"}},{kind:"MdxPage",name:"graphql-tools-v7",route:"/blog/graphql-tools-v7",frontMatter:{title:"GraphQL Tools v7 delivers the next generation GraphQL API Gateway",authors:"arda",tags:["graphql","graphql-tools","schema-first","schema-stitching"],date:"2020-11-03T00:00:00.000Z",description:"GraphQL Tools v7",image:"/blog-assets/graphql-tools-v6/cover.webm",thumbnail:"/blog-assets/graphql-tools-v6/cover.png"}},{kind:"MdxPage",name:"graphql-tools-v8",route:"/blog/graphql-tools-v8",frontMatter:{title:"GraphQL Tools V8 - Stitch Federation Services",authors:"arda",tags:["graphql","graphql-tools","schema-stitching","federation","relay"],date:"2021-07-28T00:00:00.000Z",description:"Faster and more flexible Schema Stitching!",image:"/blog-assets/graphql-tools-v6/cover.webm",thumbnail:"/blog-assets/graphql-tools-v6/cover.png"}},{kind:"MdxPage",name:"graphql-typescript-modules-codegen",route:"/blog/graphql-typescript-modules-codegen",frontMatter:{title:"GraphQL TypeScript - w/ GraphQL-Modules and GraphQL-Code-Generator",authors:"arda",tags:["graphql","graphql-modules","codegen","typescript"],date:"2018-12-04T00:00:00.000Z",description:"Writing a GraphQL TypeScript project w/ GraphQL-Modules and GraphQL-Code-Generator.",image:"/medium/0e0c64ec5841ba4731bddefaabbb75c8.png"}},{kind:"MdxPage",name:"graphql-with-typescript-done-right",route:"/blog/graphql-with-typescript-done-right",frontMatter:{title:"GraphQL with TypeScript done right",authors:"charlypoly",tags:["graphql","typescript","codegen","node","react"],date:"2021-04-29T00:00:00.000Z",description:"How to get the most of React application types with GraphQL Code Generator.",image:"/blog-assets/graphql-code-generator/cover.png",canonical:"https://charlypoly.com/publications/typescript-with-graphql-done-right"}},{kind:"MdxPage",name:"graphql-yoga-nestjs-v9",route:"/blog/graphql-yoga-nestjs-v9",frontMatter:{title:"GraphQL Yoga NestJS integration now supports NestJS v9 and Yoga v3",tags:["graphql","nodejs","typescript","yoga","nestjs"],authors:["enisdenjo"],date:"2022-12-06T00:00:00.000Z",description:"A new version of @graphql-yoga/nestjs with NestJS v9 support is out!",image:"/blog-assets/graphql-yoga-nest-v9/cover.png",thumbnail:"/blog-assets/graphql-yoga-nest-v9/thumbnail.png"}},{kind:"MdxPage",name:"graphql-yoga-v3",route:"/blog/graphql-yoga-v3",frontMatter:{title:"Announcing GraphQL Yoga v3",tags:["graphql","nodejs","typescript","yoga"],authors:["saihaj","arda","enisdenjo","laurin"],date:"2022-11-15T00:00:00.000Z",description:"The new version of GraphQL Yoga is out! Learn what has improved and what is new!",image:"/blog-assets/graphql-yoga-v3/cover.png",thumbnail:"/blog-assets/graphql-yoga-v3/thumbnail.png"}},{kind:"MdxPage",name:"graphqxl-language",route:"/blog/graphqxl-language",frontMatter:{title:"GraphQXL - The Missing GraphQL Language Extension?",tags:["graphql"],authors:"gabotechs",date:"2022-12-12T00:00:00.000Z",description:"GraphQXL, a new language for building big and scalable GraphQL server-side schemas",image:"/blog-assets/graphqxl-language/cover.png",thumbnail:"/blog-assets/graphqxl-language/thumbnail.png"}},{kind:"MdxPage",name:"houdini-and-kitql",route:"/blog/houdini-and-kitql",frontMatter:{title:"Bringing the best GraphQL experience to Svelte",tags:["graphql","svelte"],authors:["jycouet","AlecAivazis"],date:"2022-07-04T00:00:00.000Z",description:"It's time to unveil a massive effort by the KitQL and Houdini maintainers to join forces!",image:"/blog-assets/houdini-and-kitql/thumbnail.png",thumbnail:"/blog-assets/houdini-and-kitql/thumbnail.png"}},{kind:"MdxPage",name:"how-brain-detects-shapes",route:"/blog/how-brain-detects-shapes",frontMatter:{title:"This is how our brain detects shapes",authors:"eytan",tags:[],date:"2018-12-11T00:00:00.000Z",description:"This is how our brain detects shapes. And so shall the computer...",image:"/medium/f446050521c10447f45bc89e466b3370.webm"}},{kind:"MdxPage",name:"how-i-build-babel-plugins",route:"/blog/how-i-build-babel-plugins",frontMatter:{title:"This is how I build Babel plug-ins",authors:"eytan",tags:["javascript","babel"],date:"2018-10-08T00:00:00.000Z",description:"The basics of AOT compilers and how to write Babel plug-ins.",image:"/medium/b00e12c482b6ba2f40860ff3471bc55c.png"}},{kind:"MdxPage",name:"how-not-to-learn-graphql",route:"/blog/how-not-to-learn-graphql",frontMatter:{title:"How not to learn GraphQL",authors:"charlypoly",tags:["graphql"],date:"2022-02-14T00:00:00.000Z",description:"A guide to avoid common learning biases and misconceptions around GraphQL.",thumbnail:"/blog-assets/how-not-to-learn-graphql/preview.png",image:"/blog-assets/how-not-to-learn-graphql/cover.png"}},{kind:"MdxPage",name:"how-should-you-pin-dependencies-and-why",route:"/blog/how-should-you-pin-dependencies-and-why",frontMatter:{title:"How should you pin dependencies and why?",authors:"niccolo",tags:["javascript","node"],date:"2019-03-07T00:00:00.000Z",description:"Getting in-depth on making your application updated and safe.",image:"/blog-assets/how-should-you-pin-dependencies-and-why/cover.png"}},{kind:"MdxPage",name:"improved-angular-console",route:"/blog/improved-angular-console",frontMatter:{title:"How I helped improve Angular Console",authors:"kamil",tags:["angular","console"],date:"2018-11-30T00:00:00.000Z",description:"How I helped improve Angular Console. By doing GraphQL the right way.",image:"/medium/78d0f670476d24762cc05eefd42a0321.png"}},{kind:"MdxPage",name:"improved-security-with-graphql-armor-support-for-yoga-server-2",route:"/blog/improved-security-with-graphql-armor-support-for-yoga-server-2",frontMatter:{title:"Improved Security with GraphQL Armor support for Yoga Server 2",authors:"laurin",tags:["graphql","graphql-tools","security"],date:"2022-08-24T00:00:00.000Z",description:"Bringing security by default to GraphQL and Yoga Server.",image:"/blog-assets/improved-security-with-graphql-armor-support-for-yoga-server-2/cover.png",thumbnail:"/blog-assets/improved-security-with-graphql-armor-support-for-yoga-server-2/cover.png"}},{kind:"MdxPage",name:"injectable-services-in-react",route:"/blog/injectable-services-in-react",frontMatter:{title:"Injectable services in React",authors:"eytan",tags:["react"],date:"2019-06-24T00:00:00.000Z",description:"How they're implemented and their similarities with Angular services.",image:"/medium/59ec8df34fe4fd4bb20960e2270a12df.jpeg"}},{kind:"MdxPage",name:"introducing-envelop",route:"/blog/introducing-envelop",frontMatter:{title:"Introducing Envelop - The GraphQL Plugin System",authors:"dotan",tags:["graphql","server","node","plugins","envelop"],date:"2021-07-22T00:00:00.000Z",description:"A new tool by The Guild: A powerful new way for creating fast, modern and secure GraphQL servers.",thumbnail:"/blog-assets/envelop/envelop_cover.png",image:"/blog-assets/envelop/envelop_cover.png"}},{kind:"MdxPage",name:"introducing-graphql-eslint",route:"/blog/introducing-graphql-eslint",frontMatter:{title:"Introducing GraphQL-ESLint!",authors:"dotan",tags:["graphql","graphql-eslint","eslint"],date:"2020-10-03T00:00:00.000Z",description:"A new tool by The Guild, for making your GraphQL schema and GraphQL operations more standard and robust!",image:"https://the-guild.dev/graphql/eslint/logo.png"}},{kind:"MdxPage",name:"introducing-graphql-inspector",route:"/blog/introducing-graphql-inspector",frontMatter:{title:"Introducing: GraphQL Inspector",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2019-01-18T00:00:00.000Z",description:"Prevent breaking changes. Find broken operations. Get Schema Coverage. Check deprecated usage and type duplicates. All as part of your CI process.",image:"/medium/f2f4b5ebdecf4640a2cbc79f7560ec88.png"}},{kind:"MdxPage",name:"joining-graphql-foundation",route:"/blog/joining-graphql-foundation",frontMatter:{title:"The Guild is joining the GraphQL Foundation",authors:"uri",tags:["graphql","foundation"],date:"2020-10-30T00:00:00.000Z",description:"Our plans to contribute to the GraphQL Foundation.",image:"/blog-assets/joining-graphql-foundation/graphql-foundation-logo.png",thumbnail:"/blog-assets/joining-graphql-foundation/graphql-foundation-logo.png"}},{kind:"MdxPage",name:"magical-babel-plugin-for-react-performance-boost",route:"/blog/magical-babel-plugin-for-react-performance-boost",frontMatter:{title:"Babel plugin and get a performance boost for your React components",tags:["babel","react"],authors:"eytan",date:"2019-01-21T00:00:00.000Z",description:"Use this magical Babel plugin and get a performance boost for your React components.",image:"/medium/5f2a07bb7a73727cca4707c0e85f75e8.jpeg"}},{kind:"MdxPage",name:"manage-circular-imports-hell-in-graphql-modules",route:"/blog/manage-circular-imports-hell-in-graphql-modules",frontMatter:{title:"Manage Circular Imports Hell in GraphQL-Modules",authors:"arda",tags:["graphql","graphql-modules","di"],date:"2019-03-18T00:00:00.000Z",description:"Manage Circular Imports Hell in GraphQL-Modules.",image:"/medium/e057400fd0eccf986e581abce77dd3d5.png"}},{kind:"MdxPage",name:"meteor-with-webpack-in-2018",route:"/blog/meteor-with-webpack-in-2018",frontMatter:{title:"Meteor with Webpack — Faster compilation and better source handling",tags:["meteor","webpack"],authors:"arda",date:"2018-07-13T00:00:00.000Z",description:"Faster compilation and better source handling.",image:"/blog-assets/meteor-with-webpack-in-2018/cover.png"}},{kind:"MdxPage",name:"migrating-from-rest",route:"/blog/migrating-from-rest",frontMatter:{title:"Migrating from Schemaless REST API to GraphQL without writing any code",tags:["graphql","rest","graphql-mesh"],authors:"arda",date:"2020-05-31T00:00:00.000Z",description:"Migrating to GraphQL from a REST API has never been easier. With tools like GraphQL Mesh you can do it automatically, without writing code and even if you don't have any schema for your existing REST API sources.",image:"/blog-assets/migrating-from-rest/cover.png"}},{kind:"MdxPage",name:"modular-encapsulation-graphql-modules",route:"/blog/modular-encapsulation-graphql-modules",frontMatter:{title:"Modular Encapsulation in Large-Scale GraphQL Projects",authors:"arda",tags:["graphql","graphql-modules"],date:"2019-01-07T00:00:00.000Z",description:"Why is True Modular Encapsulation So Important in Large-Scale GraphQL Projects? — GraphQL Modules is your savior!",image:"/medium/a6fcd73268ea14133c0ec3f5cc4f0728.png"}},{kind:"MdxPage",name:"multiple-environments-endpoints-graphql-inspector",route:"/blog/multiple-environments-endpoints-graphql-inspector",frontMatter:{title:"Multiple environments and endpoints in GraphQL Inspector",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2020-05-02T00:00:00.000Z",description:"Use different variants of GraphQL schema.  Live and running GraphQL API as the source of truth of a\xa0schema.",image:"/blog-assets/multiple-environments-endpoints-graphql-inspector/cover.png"}},{kind:"MdxPage",name:"new-graphql-inspector",route:"/blog/new-graphql-inspector",frontMatter:{title:"New GraphQL Inspector and upcoming\xa0features",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2020-05-05T00:00:00.000Z",description:"See what's new and shape the future of GraphQL Inspector together! It's entirely open-sourced!",image:"/blog-assets/new-graphql-inspector/cover.png"}},{kind:"MdxPage",name:"nodes-child-process",route:"/blog/nodes-child-process",frontMatter:{title:"Getting to know Node's child_process module",authors:"eytan",tags:["node"],date:"2018-09-27T00:00:00.000Z",description:"How to call git, cpp, sh, etc., from a Node.js script.",image:"/medium/8e3e63cb7dfad3159760903440eb32fd.png"}},{kind:"MdxPage",name:"on-demand-shared-graphql-subscriptions-with-rxjs",route:"/blog/on-demand-shared-graphql-subscriptions-with-rxjs",frontMatter:{title:"On-Demand Shared GraphQL Subscriptions with RxJS",authors:"gthau",tags:["graphql","subscriptions","typescript","rxjs"],date:"2023-01-27T00:00:00.000Z",description:"Trigger on-demand expensive subscriptions and share results between multiple subscribers",image:"/blog-assets/on-demand-shared-graphql-subscriptions-with-rxjs/cover.png",thumbnail:"/blog-assets/on-demand-shared-graphql-subscriptions-with-rxjs/thumbnail.png"}},{kind:"MdxPage",name:"oss-contributor-workflow",route:"/blog/oss-contributor-workflow",frontMatter:{title:"Easy Open Source - Orchestrating the Open Source Contribution Workflow",authors:"tvvignesh",tags:["open source","contributor","workflow"],date:"2021-04-22T00:00:00.000Z",description:"Sharing our journey of making it easier for people to participate in Open Source.",image:"/blog-assets/oss-contributor-workflow/cover.png",thumbnail:"/blog-assets/oss-contributor-workflow/cover.png"}},{kind:"MdxPage",name:"react-app-out-of-a-webflow",route:"/blog/react-app-out-of-a-webflow",frontMatter:{title:"How to create a React app out of a Webflow project",authors:"eytan",tags:["react","webflow"],date:"2018-09-07T00:00:00.000Z",description:"How to create a React app out of a Webflow project.",image:"/medium/50ea860594889aa4f1b96a509c886b9c.jpg"}},{kind:"MdxPage",name:"react-dom-event-handling-system",route:"/blog/react-dom-event-handling-system",frontMatter:{title:"Getting to know React DOM's event handling system inside out",authors:"eytan",tags:["react","dom"],date:"2018-10-22T00:00:00.000Z",description:"Getting to know React DOM's event handling system inside out.",image:"/medium/dff8edec78c39a832292c7435ee1213b.png"}},{kind:"MdxPage",name:"react-e2e-tests-with-hooks",route:"/blog/react-e2e-tests-with-hooks",frontMatter:{title:"How to run React E2E tests purely with hooks",authors:"eytan",tags:["react"],date:"2020-02-10T00:00:00.000Z",description:"How to run React E2E tests purely with hooks. Tested with React-Native and Firebase Test Lab.",image:"/medium/aa57af3e7221a72b87255d47a28c595c.png"}},{kind:"MdxPage",name:"react-hooks-system",route:"/blog/react-hooks-system",frontMatter:{title:"Under the hood of React's hooks system",authors:"eytan",tags:["react"],date:"2018-11-21T00:00:00.000Z",description:"Looking at the implementation and getting to know it inside out.",image:"/medium/923d5b18cf82df80927ee5278f7048ff.jpeg"}},{kind:"MdxPage",name:"recursive-react-tree-component-implementation-made-easy",route:"/blog/recursive-react-tree-component-implementation-made-easy",frontMatter:{title:"Recursive React tree component implementation made easy",authors:"eytan",tags:["react"],date:"2018-11-05T00:00:00.000Z",description:"The challenges that I've faced and how I solved them.",image:"/medium/db6c7817bbaf73790065c3e1f8ebb835.png"}},{kind:"MdxPage",name:"remote-control-graphql-inspector",route:"/blog/remote-control-graphql-inspector",frontMatter:{title:"Enable Remote Control in GraphQL Inspector",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2020-05-01T00:00:00.000Z",description:"Intercept schema changes via HTTP and decide which changes are acceptable which are not and all of this through a serverless function.",image:"/blog-assets/remote-control-graphql-inspector/cover.png"}},{kind:"MdxPage",name:"runtime-jsx",route:"/blog/runtime-jsx",frontMatter:{title:"Implementing a runtime version of JSX",authors:"eytan",tags:["react"],date:"2018-11-12T00:00:00.000Z",description:"Learning how to think like a JSX parser and building an AST",image:"/medium/fadbe31be89eb8b0be9fc5f035c9617d.png"}},{kind:"MdxPage",name:"scalable-apis-with-graphql-server-codegen-preset",route:"/blog/scalable-apis-with-graphql-server-codegen-preset",frontMatter:{title:"Scalable APIs with GraphQL Server Codegen Preset",authors:"eddeee888",tags:["graphql","codegen","node","server","typescript"],date:"2023-01-24T00:00:00.000Z",description:"Structuring GraphQL server the right way enables many teams to work in harmony while minimising runtime risks.",image:"/blog-assets/scalable-apis-with-graphql-server-codegen-preset/cover.png",thumbnail:"/blog-assets/scalable-apis-with-graphql-server-codegen-preset/thumbnail.png"}},{kind:"MdxPage",name:"schema-change-notifications",route:"/blog/schema-change-notifications",frontMatter:{title:"Schema Change Notifications in GraphQL Inspector",authors:"kamil",tags:["graphql","graphql-inspector"],date:"2020-05-04T00:00:00.000Z",description:"Stay up to date with changes in your GraphQL Schema. Receive notifications on Slack, Discord or even via WebHooks.",image:"/blog-assets/schema-change-notifications/cover.png"}},{kind:"MdxPage",name:"slack-bot-with-cloudflare",route:"/blog/slack-bot-with-cloudflare",frontMatter:{title:"Building Slack Bot with Cloudflare Workers",authors:"tuvalSimha",tags:["graphql","codegen"],date:"2022-10-12T00:00:00.000Z",description:"GitHub Slack bot reminder in Cloudflare Workers",image:"/blog-assets/slack-bot-with-cloudflare/cover.png",thumbnail:"/blog-assets/slack-bot-with-cloudflare/thumbnail.png"}},{kind:"MdxPage",name:"sofa",route:"/blog/sofa",frontMatter:{title:"SOFA — The best way to REST (is GraphQL)",authors:"uri",tags:["graphql","rest","sofa"],date:"2019-01-25T00:00:00.000Z",description:"Ending the REST vs. GraphQL debate once and for all",image:"/blog-assets/sofa/cover.webm",thumbnail:"/blog-assets/sofa/cover.jpg"}},{kind:"MdxPage",name:"styled-components-encapsulation",route:"/blog/styled-components-encapsulation",frontMatter:{title:"New encapsulation method for Styled-Components with Babel",tags:["react","babel","css"],authors:"eytan",date:"2019-03-04T00:00:00.000Z",description:"Use private class names instead of a dedicated component",image:"/medium/847a27410df9de57458f3736cf937b9b.png"}},{kind:"MdxPage",name:"subscriptions-and-live-queries-real-time-with-graphql",route:"/blog/subscriptions-and-live-queries-real-time-with-graphql",frontMatter:{title:"Subscriptions and Live Queries - Real Time with GraphQL",authors:"laurin",tags:["graphql","subscription","real-time"],date:"2021-04-21T00:00:00.000Z",description:"GraphQL subscriptions are used by many. Live Query adoption, however, has not advanced that much. Let's take a look at both methods for achieving real-time communication with GraphQL.",image:"/blog-assets/subscriptions-and-live-queries-real-time-with-graphql/cover.png"}},{kind:"MdxPage",name:"support-nodejs-esm",route:"/blog/support-nodejs-esm",frontMatter:{title:"What does it take to support Node.js ESM?",authors:"pablosz",tags:["nodejs","mjs","esm","typescript"],date:"2021-08-12T00:00:00.000Z",description:"I have worked on all The Guild's libraries and graphql-js to support ESM. Here is how you can do it too.",image:"/blog-assets/nodejs-esm/nodejs_logo.png"}},{kind:"MdxPage",name:"swift-graphql",route:"/blog/swift-graphql",frontMatter:{title:"SwiftGraphQL - A GraphQL client for Swift lovers.",authors:"maticzav",tags:["graphql","swift","client","swift-graphql"],date:"2021-08-02T00:00:00.000Z",description:"SwiftGraphQL lets you use all the power Swift gives you to query your data. It feels like magic.",image:"/blog-assets/swift-graphql/thumbnail.png",thumbnail:"/blog-assets/swift-graphql/thumbnail.png"}},{kind:"Folder",name:"tag",route:"/blog/tag",children:[{kind:"Meta",data:{"*":{type:"page",display:"hidden",theme:{layout:"full",timestamp:!1}}}}]},{kind:"MdxPage",name:"taking-over-merge-graphql-schemas",route:"/blog/taking-over-merge-graphql-schemas",frontMatter:{title:"The Guild is taking over maintenance of merge-graphql-schemas",authors:"uri",tags:["graphql","merge-graphql-schemas"],date:"2019-06-18T00:00:00.000Z",description:"The Guild is taking over maintenance of merge-graphql-schemas, so let's talk about GraphQL Schema management",image:"/medium/0a4d55d345d123fa0b0c131d55ea903b.png"}},{kind:"MdxPage",name:"the-anatomy-of-a-graphql-request",route:"/blog/the-anatomy-of-a-graphql-request",frontMatter:{title:"The Anatomy of a GraphQL Request",authors:"laurin",tags:["graphql"],date:"2022-01-30T00:00:00.000Z",description:"Let's go back to the basics and break down a GraphQL request.",thumbnail:"/blog-assets/the-anatomy-of-a-graphql-request/thumbnail.png",image:"/blog-assets/the-anatomy-of-a-graphql-request/image.png"}},{kind:"MdxPage",name:"typed-document-node",route:"/blog/typed-document-node",frontMatter:{title:"TypedDocumentNode: the next generation of GraphQL and TypeScript",authors:"dotan",tags:["graphql","codegen","typescript","react"],date:"2020-07-22T00:00:00.000Z",updateDate:"2020-08-02T00:00:00.000Z",description:"Using GraphQL and Typescript on the client just became a lot easier!",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"typescript-graphql-unions-types",route:"/blog/typescript-graphql-unions-types",frontMatter:{title:"Getting the Best of TypeScript and GraphQL: Union Types",description:"The combination of TypeScript and GraphQL can be very powerful. Both TypeScript and GraphQL support the concept of discriminated unions.",authors:"tuvalSimha",tags:["graphql","typescript","codegen"],date:"2022-10-18T00:00:00.000Z",image:"/blog-assets/typescript-unions-types/cover.png",thumbnail:"/blog-assets/typescript-unions-types/thumbnail.png"}},{kind:"MdxPage",name:"unleash-the-power-of-fragments-with-graphql-codegen",route:"/blog/unleash-the-power-of-fragments-with-graphql-codegen",frontMatter:{title:"Unleash the power of Fragments with GraphQL Codegen",authors:"laurin",tags:["graphql","codegen","react","typescript","relay","apollo","urql"],date:"2022-08-05T00:00:00.000Z",description:"The most important parts of Relay are the concepts of building and scaling applications, let's show how you can use these patterns in your existing project, no matter what client library you are currently using.",image:"/blog-assets/unleash-the-power-of-fragments-with-graphql-codegen/cover.png",thumbnail:"/blog-assets/unleash-the-power-of-fragments-with-graphql-codegen/thumbnail.png"}},{kind:"MdxPage",name:"whats-new-in-graphql-cli-4.1.0",route:"/blog/whats-new-in-graphql-cli-4.1.0",frontMatter:{title:"What's new in GraphQL CLI 4.1",authors:"ephelan",tags:["graphql","node","graphql-cli","graphback"],date:"2020-10-15T00:00:00.000Z",description:"GraphQL CLI - experience the modern way for developing full-stack GraphQL applications.",image:"/blog-assets/graphql-cli/cover.webm",thumbnail:"/blog-assets/graphql-cli/cover.png"}},{kind:"MdxPage",name:"whats-new-in-graphql-codegen-v2",route:"/blog/whats-new-in-graphql-codegen-v2",frontMatter:{title:"What's new in GraphQL-Codegen v2?",authors:"dotan",tags:["graphql","codegen","typescript"],date:"2021-08-03T00:00:00.000Z",description:"Human-readable types, improved infrastructure, a new plugin for TypeScript and more!",image:"/blog-assets/graphql-code-generator/cover.png"}},{kind:"MdxPage",name:"whats-new-on-meteor-client-bundler",route:"/blog/whats-new-on-meteor-client-bundler",frontMatter:{title:"Meteor Client Bundler — React Native support, handling Meteor imports",tags:["meteor","react","react-native"],authors:"arda",date:"2018-07-13T00:00:00.000Z",description:"Introduction to new features of MCB. Better React Native support, handling Meteor imports etc.",image:"/blog-assets/whats-new-on-meteor-client-bundler/cover.png"}},{kind:"MdxPage",name:"whatsapp-clone-apollo-angular-graphql-typescript-and-postgresql",route:"/blog/whatsapp-clone-apollo-angular-graphql-typescript-and-postgresql",frontMatter:{title:"WhatsApp Clone - Angular, GraphQL, Apollo, TypeScript and PostgreSQL",authors:"niccolo",tags:["whatsapp-clone","angular","graphql","typescript","postgres"],date:"2019-02-25T00:00:00.000Z",description:"An open-source full-stack example app made with Angular 7.2, TypeScript, GraphQL Subscriptions, GraphQL Code Generator, GraphQL Modules, PostgreSQL and TypeORM.",image:"/blog-assets/whatsapp-clone-apollo-angular-graphql-typescript-and-postgresql/cover.jpeg"}},{kind:"MdxPage",name:"whatsapp-clone-react-hooks-graphql-typescript-and-postgresql",route:"/blog/whatsapp-clone-react-hooks-graphql-typescript-and-postgresql",frontMatter:{title:"WhatsApp Clone - GraphQL, Apollo, TypeScript and PostgreSQL",authors:"eytan",tags:["whatsapp-clone","react","graphql","typescript","postgres"],date:"2019-02-01T00:00:00.000Z",description:"Fully functional WhatsApp Clone using React (Hooks+Suspense), GraphQL, Apollo, TypeScript and PostgreSQL",image:"/medium/3eb34dbe848e635cbc12a38471b2da4e.jpeg"}},{kind:"MdxPage",name:"whatsapp-clone-with-ionic-angular-and-meteor",route:"/blog/whatsapp-clone-with-ionic-angular-and-meteor",frontMatter:{title:"Build a WhatsApp Clone with Ionic 2, Angular 2, and Meteor",authors:"uri",tags:["whatsapp-clone","angular","meteor-ionic"],date:"2016-11-30T00:00:00.000Z",description:"Build a WhatsApp Clone with Ionic 2, Angular 2, and Meteor",image:"/medium/bb1bd34e9a4cde578539f00cc4696f50.png"}},{kind:"MdxPage",name:"whatsapp-clone-with-meteor-and-ionic",route:"/blog/whatsapp-clone-with-meteor-and-ionic",frontMatter:{title:"Build a WhatsApp clone with Meteor and Ionic — Meteor Platform version",authors:"uri",tags:["whatsapp-clone","meteor","ionic"],date:"2015-10-16T00:00:00.000Z",description:"Build a WhatsApp clone using Meteor, Angular, and the Ionic Framework for CSS and mobile components",image:"/medium/d049989e715f4848c09315b23902da8d.png"}}]},{kind:"MdxPage",name:"blog",route:"/blog",frontMatter:{title:"Blog",description:"Announcements about our Open-Source projects",skipSync:!0}},{kind:"MdxPage",name:"index",route:"/",frontMatter:{title:"GraphQL Tools",description:"Open Source developers with experience of working with the largest companies and applications. GraphQL consulting, workshops and trainings."}},{kind:"MdxPage",name:"logos",route:"/logos",frontMatter:{description:"Open Source developers with experience of working with the largest companies and applications. GraphQL consulting, workshops and trainings"}},{kind:"Folder",name:"newsletter",route:"/newsletter",children:[{kind:"Meta",data:{"*":{theme:{sidebar:!1,toc:!0,typesetting:"article"}},"issue-1":"Issue 1"}},{kind:"MdxPage",name:"issue-1",route:"/newsletter/issue-1",frontMatter:{date:"2022-05-26T00:00:00.000Z",description:"The Guild Newsletter is a monthly newsletter that features the latest news and updates from The Guild and GraphQL Foundation projects as well as tips on how to get the best of our tools."}}]},{kind:"MdxPage",name:"services",route:"/services",frontMatter:{title:"Our Services",description:"Open Source developers with experience of working with the largest companies and applications. GraphQL consulting, workshops and trainings."}},{kind:"MdxPage",name:"solutions",route:"/solutions",frontMatter:{description:"Recommended GraphQL resources"}}],headings:[{depth:2,value:"Subscription Recap",id:"subscription-recap"},{depth:2,value:"Live Queries",id:"live-queries"},{depth:2,value:"Polling a Query",id:"polling-a-query"},{depth:2,value:"Live Queries over Subscriptions",id:"live-queries-over-subscriptions"},{depth:2,value:"GraphQL Live Queries over Subscriptions with JSON Patch",id:"graphql-live-queries-over-subscriptions-with-json-patch"},{depth:2,value:"GraphQL Live Queries via the @live Directive",id:"graphql-live-queries-via-the-live-directive"},{depth:3,value:"@n1ru4l/graphql-live-query A Common Definition and Set of Utilities for Determining of a Live Query",id:"n1ru4lgraphql-live-query-a-common-definition-and-set-of-utilities-for-determining-of-a-live-query"},{depth:3,value:"@n1ru4l/in-memory-live-query-store Keep Track and Invalidate Resources Selected by a Live Query in an Efficient, but Generic Way",id:"n1ru4lin-memory-live-query-store-keep-track-and-invalidate-resources-selected-by-a-live-query-in-an-efficient-but-generic-way"},{depth:3,value:"@n1ru4l/graphql-live-query-patch: Optional JSON Patch Middleware for Smaller Payloads over the Wire",id:"n1ru4lgraphql-live-query-patch-optional-json-patch-middleware-for-smaller-payloads-over-the-wire"},{depth:2,value:"What's Next?",id:"whats-next"}],timestamp:1677946571e3,flexsearch:{codeblocks:!0},newNextLinkBehavior:!0,title:"Subscriptions and Live Queries - Real Time with GraphQL"},themeConfig:l.Z,pageNextRoute:"/blog/subscriptions-and-live-queries-real-time-with-graphql",pageOptsChecksum:void 0,dynamicMetaModules:[]})}},function(e){e.O(0,[2893,1946,2027,9774,2888,179],function(){return e(e.s=98163)}),_N_E=e.O()}]);